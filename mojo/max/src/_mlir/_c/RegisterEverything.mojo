# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
#
# GENERATED FILE, DO NOT EDIT!
#
# Last generated by connorgray at 2024-07-03 18:53:29.774531 with command
# ```
#   ./utils/mojo/mlir-bindings/generate_mlir_c_bindings.sh \
#     RegisterEverything.h
# ```
#
# ===----------------------------------------------------------------------=== #

from .ffi import MLIR_func

# ===-- mlir-c/RegisterEverything.h - Register all MLIR entities --*- C -*-===//
#
#  Part of the LLVM Project, under the Apache License v2.0 with LLVM
#  Exceptions.
#  See https://llvm.org/LICENSE.txt for license information.
#  SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# ===----------------------------------------------------------------------===//
#  This header contains registration entry points for MLIR upstream dialects
#  and passes. Downstream projects typically will not want to use this unless
#  if they don't care about binary size or build bloat and just wish access
#  to the entire set of upstream facilities. For those that do care, they
#  should use registration functions specific to their project.
# ===----------------------------------------------------------------------===//

from .IR import *


fn mlirRegisterAllDialects(registry: MlirDialectRegistry) -> NoneType:
    """Appends all upstream dialects and extensions to the dialect registry."""
    return MLIR_func[
        "mlirRegisterAllDialects", fn (MlirDialectRegistry) -> NoneType
    ]()(registry)


fn mlirRegisterAllLLVMTranslations(context: MlirContext) -> NoneType:
    """Register all translations to LLVM IR for dialects that can support it."""
    return MLIR_func[
        "mlirRegisterAllLLVMTranslations", fn (MlirContext) -> NoneType
    ]()(context)


fn mlirRegisterAllPasses() -> NoneType:
    """Register all compiler passes of MLIR."""
    return MLIR_func["mlirRegisterAllPasses", fn () -> NoneType]()()
