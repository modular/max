# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
#
# GENERATED FILE, DO NOT EDIT!
#
# Last generated by stef at 2024-01-12 08:19:31.946080 with command
# ```
#   ./utils/mojo-mlir/generate_mlir_c_bindings.sh \
#     ExecutionEngine.h
# ```
#
# ===----------------------------------------------------------------------=== #

from .ffi import MLIR_func
from .IR import MlirModule
from .Support import MlirLogicalResult, MlirStringRef

# ===-- mlir-c/ExecutionEngine.h - Execution engine management ---*- C -*-====//
#
#  Part of the LLVM Project, under the Apache License v2.0 with LLVM
#  Exceptions.
#  See https://llvm.org/LICENSE.txt for license information.
#  SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# ===----------------------------------------------------------------------===//
#
#  This header provides basic access to the MLIR JIT. This is minimalist and
#  experimental at the moment.
#
# ===----------------------------------------------------------------------===//


@register_passable("trivial")
struct MlirExecutionEngine:
    var ptr: Pointer[NoneType]


fn mlirExecutionEngineCreate(
    op: MlirModule,
    opt_level: Int16,
    num_paths: Int16,
    shared_lib_paths: Pointer[MlirStringRef],
    enable_object_dump: Bool,
) -> MlirExecutionEngine:
    """Creates an ExecutionEngine for the provided ModuleOp. The ModuleOp is
    expected to be "translatable" to LLVM IR (only contains operations in
    dialects that implement the `LLVMTranslationDialectInterface`). The module
    ownership stays with the client and can be destroyed as soon as the call
    returns. `optLevel` is the optimization level to be used for transformation
    and code generation. LLVM passes at `optLevel` are run before code
    generation. The number and array of paths corresponding to shared libraries
    that will be loaded are specified via `numPaths` and `sharedLibPaths`
    respectively.
    TODO: figure out other options."""
    return MLIR_func[
        "mlirExecutionEngineCreate",
        fn (
            MlirModule, Int16, Int16, Pointer[MlirStringRef], Bool
        ) -> MlirExecutionEngine,
    ]()(op, opt_level, num_paths, shared_lib_paths, enable_object_dump)


fn mlirExecutionEngineDestroy(jit: MlirExecutionEngine) -> NoneType:
    """Destroy an ExecutionEngine instance."""
    return MLIR_func[
        "mlirExecutionEngineDestroy", fn (MlirExecutionEngine) -> NoneType
    ]()(jit)


# FIXEME(codegen): static function mlirExecutionEngineIsNull


fn mlirExecutionEngineInvokePacked(
    jit: MlirExecutionEngine,
    name: MlirStringRef,
    arguments: Pointer[Pointer[NoneType]],
) -> MlirLogicalResult:
    """Invoke a native function in the execution engine by name with the arguments
    and result of the invoked function passed as an array of pointers. The
    function must have been tagged with the `llvm.emit_c_interface` attribute.
    Returns a failure if the execution fails for any reason (the function name
    can't be resolved for instance)."""
    return MLIR_func[
        "mlirExecutionEngineInvokePacked",
        fn (
            MlirExecutionEngine, MlirStringRef, Pointer[Pointer[NoneType]]
        ) -> MlirLogicalResult,
    ]()(jit, name, arguments)


fn mlirExecutionEngineLookupPacked(
    jit: MlirExecutionEngine, name: MlirStringRef
) -> Pointer[NoneType]:
    """Lookup the wrapper of the native function in the execution engine with the
    given name, returns nullptr if the function can't be looked-up."""
    return MLIR_func[
        "mlirExecutionEngineLookupPacked",
        fn (MlirExecutionEngine, MlirStringRef) -> Pointer[NoneType],
    ]()(jit, name)


fn mlirExecutionEngineLookup(
    jit: MlirExecutionEngine, name: MlirStringRef
) -> Pointer[NoneType]:
    """Lookup a native function in the execution engine by name, returns nullptr
    if the name can't be looked-up."""
    return MLIR_func[
        "mlirExecutionEngineLookup",
        fn (MlirExecutionEngine, MlirStringRef) -> Pointer[NoneType],
    ]()(jit, name)


fn mlirExecutionEngineRegisterSymbol(
    jit: MlirExecutionEngine, name: MlirStringRef, sym: Pointer[NoneType]
) -> NoneType:
    """Register a symbol with the jit: this symbol will be accessible to the jitted
    code."""
    return MLIR_func[
        "mlirExecutionEngineRegisterSymbol",
        fn (MlirExecutionEngine, MlirStringRef, Pointer[NoneType]) -> NoneType,
    ]()(jit, name, sym)


fn mlirExecutionEngineDumpToObjectFile(
    jit: MlirExecutionEngine, file_name: MlirStringRef
) -> NoneType:
    """Dump as an object in `fileName`."""
    return MLIR_func[
        "mlirExecutionEngineDumpToObjectFile",
        fn (MlirExecutionEngine, MlirStringRef) -> NoneType,
    ]()(jit, file_name)
