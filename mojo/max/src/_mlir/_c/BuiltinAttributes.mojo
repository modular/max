# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
#
# GENERATED FILE, DO NOT EDIT!
#
# Last generated by stef at 2024-01-12 08:19:30.829999 with command
# ```
#   ./utils/mojo-mlir/generate_mlir_c_bindings.sh \
#     BuiltinAttributes.h
# ```
#
# ===----------------------------------------------------------------------=== #

from .AffineMap import MlirAffineMap
from .ffi import MLIR_func
from .IR import (
    MlirAttribute,
    MlirContext,
    MlirLocation,
    MlirNamedAttribute,
    MlirType,
)
from .Support import MlirStringRef, MlirTypeID

# ===-- mlir-c/BuiltinAttributes.h - C API for Builtin Attributes -*- C -*-===//
#
#  Part of the LLVM Project, under the Apache License v2.0 with LLVM
#  Exceptions.
#  See https://llvm.org/LICENSE.txt for license information.
#  SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# ===----------------------------------------------------------------------===//
#
#  This header declares the C interface to MLIR Builtin attributes.
#
# ===----------------------------------------------------------------------===//


fn mlirAttributeGetNull() -> MlirAttribute:
    """Returns an empty attribute."""
    return MLIR_func["mlirAttributeGetNull", fn () -> MlirAttribute]()()


# ===----------------------------------------------------------------------===//
#  Location attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsALocation(attr: MlirAttribute) -> Bool:
    return MLIR_func["mlirAttributeIsALocation", fn (MlirAttribute) -> Bool]()(
        attr
    )


# ===----------------------------------------------------------------------===//
#  Affine map attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsAAffineMap(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is an affine map attribute."""
    return MLIR_func["mlirAttributeIsAAffineMap", fn (MlirAttribute) -> Bool]()(
        attr
    )


fn mlirAffineMapAttrGet(map: MlirAffineMap) -> MlirAttribute:
    """Creates an affine map attribute wrapping the given map. The attribute
    belongs to the same context as the affine map."""
    return MLIR_func[
        "mlirAffineMapAttrGet", fn (MlirAffineMap) -> MlirAttribute
    ]()(map)


fn mlirAffineMapAttrGetValue(attr: MlirAttribute) -> MlirAffineMap:
    """Returns the affine map wrapped in the given affine map attribute."""
    return MLIR_func[
        "mlirAffineMapAttrGetValue", fn (MlirAttribute) -> MlirAffineMap
    ]()(attr)


fn mlirAffineMapAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of an AffineMap attribute."""
    return MLIR_func["mlirAffineMapAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  Array attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsAArray(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is an array attribute."""
    return MLIR_func["mlirAttributeIsAArray", fn (MlirAttribute) -> Bool]()(
        attr
    )


fn mlirArrayAttrGet(
    ctx: MlirContext, num_elements: Int, elements: Pointer[MlirAttribute]
) -> MlirAttribute:
    """Creates an array element containing the given list of elements in the given
    context."""
    return MLIR_func[
        "mlirArrayAttrGet",
        fn (MlirContext, Int, Pointer[MlirAttribute]) -> MlirAttribute,
    ]()(ctx, num_elements, elements)


fn mlirArrayAttrGetNumElements(attr: MlirAttribute) -> Int:
    """Returns the number of elements stored in the given array attribute."""
    return MLIR_func[
        "mlirArrayAttrGetNumElements", fn (MlirAttribute) -> Int
    ]()(attr)


fn mlirArrayAttrGetElement(attr: MlirAttribute, pos: Int) -> MlirAttribute:
    """Returns pos-th element stored in the given array attribute."""
    return MLIR_func[
        "mlirArrayAttrGetElement", fn (MlirAttribute, Int) -> MlirAttribute
    ]()(attr, pos)


fn mlirArrayAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of an Array attribute."""
    return MLIR_func["mlirArrayAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  Dictionary attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsADictionary(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is a dictionary attribute."""
    return MLIR_func[
        "mlirAttributeIsADictionary", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirDictionaryAttrGet(
    ctx: MlirContext, num_elements: Int, elements: Pointer[MlirNamedAttribute]
) -> MlirAttribute:
    """Creates a dictionary attribute containing the given list of elements in the
    provided context."""
    return MLIR_func[
        "mlirDictionaryAttrGet",
        fn (MlirContext, Int, Pointer[MlirNamedAttribute]) -> MlirAttribute,
    ]()(ctx, num_elements, elements)


fn mlirDictionaryAttrGetNumElements(attr: MlirAttribute) -> Int:
    """Returns the number of attributes contained in a dictionary attribute."""
    return MLIR_func[
        "mlirDictionaryAttrGetNumElements", fn (MlirAttribute) -> Int
    ]()(attr)


fn mlirDictionaryAttrGetElement(
    attr: MlirAttribute, pos: Int
) -> MlirNamedAttribute:
    """Returns pos-th element of the given dictionary attribute."""
    return MLIR_func[
        "mlirDictionaryAttrGetElement",
        fn (MlirAttribute, Int) -> MlirNamedAttribute,
    ]()(attr, pos)


fn mlirDictionaryAttrGetElementByName(
    attr: MlirAttribute, name: MlirStringRef
) -> MlirAttribute:
    """Returns the dictionary attribute element with the given name or NULL if the
    given name does not exist in the dictionary."""
    return MLIR_func[
        "mlirDictionaryAttrGetElementByName",
        fn (MlirAttribute, MlirStringRef) -> MlirAttribute,
    ]()(attr, name)


fn mlirDictionaryAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of a Dictionary attribute."""
    return MLIR_func["mlirDictionaryAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  Floating point attribute.
# ===----------------------------------------------------------------------===//

#  TODO: add support for APFloat and APInt to LLVM IR C API, then expose the
#  relevant functions here.


fn mlirAttributeIsAFloat(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is a floating point attribute."""
    return MLIR_func["mlirAttributeIsAFloat", fn (MlirAttribute) -> Bool]()(
        attr
    )


fn mlirFloatAttrDoubleGet(
    ctx: MlirContext, type: MlirType, value: Float64
) -> MlirAttribute:
    """Creates a floating point attribute in the given context with the given
    double value and double-precision FP semantics."""
    return MLIR_func[
        "mlirFloatAttrDoubleGet",
        fn (MlirContext, MlirType, Float64) -> MlirAttribute,
    ]()(ctx, type, value)


fn mlirFloatAttrDoubleGetChecked(
    loc: MlirLocation, type: MlirType, value: Float64
) -> MlirAttribute:
    """Same as "mlirFloatAttrDoubleGet", but if the type is not valid for a
    construction of a FloatAttr, returns a null MlirAttribute."""
    return MLIR_func[
        "mlirFloatAttrDoubleGetChecked",
        fn (MlirLocation, MlirType, Float64) -> MlirAttribute,
    ]()(loc, type, value)


fn mlirFloatAttrGetValueDouble(attr: MlirAttribute) -> Float64:
    """Returns the value stored in the given floating point attribute, interpreting
    the value as double."""
    return MLIR_func[
        "mlirFloatAttrGetValueDouble", fn (MlirAttribute) -> Float64
    ]()(attr)


fn mlirFloatAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of a Float attribute."""
    return MLIR_func["mlirFloatAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  Integer attribute.
# ===----------------------------------------------------------------------===//

#  TODO: add support for APFloat and APInt to LLVM IR C API, then expose the
#  relevant functions here.


fn mlirAttributeIsAInteger(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is an integer attribute."""
    return MLIR_func["mlirAttributeIsAInteger", fn (MlirAttribute) -> Bool]()(
        attr
    )


fn mlirIntegerAttrGet(type: MlirType, value: Int64) -> MlirAttribute:
    """Creates an integer attribute of the given type with the given integer
    value."""
    return MLIR_func[
        "mlirIntegerAttrGet", fn (MlirType, Int64) -> MlirAttribute
    ]()(type, value)


fn mlirIntegerAttrGetValueInt(attr: MlirAttribute) -> Int64:
    """Returns the value stored in the given integer attribute, assuming the value
    is of signless type and fits into a signed 64-bit integer."""
    return MLIR_func[
        "mlirIntegerAttrGetValueInt", fn (MlirAttribute) -> Int64
    ]()(attr)


fn mlirIntegerAttrGetValueSInt(attr: MlirAttribute) -> Int64:
    """Returns the value stored in the given integer attribute, assuming the value
    is of signed type and fits into a signed 64-bit integer."""
    return MLIR_func[
        "mlirIntegerAttrGetValueSInt", fn (MlirAttribute) -> Int64
    ]()(attr)


fn mlirIntegerAttrGetValueUInt(attr: MlirAttribute) -> UInt64:
    """Returns the value stored in the given integer attribute, assuming the value
    is of unsigned type and fits into an unsigned 64-bit integer."""
    return MLIR_func[
        "mlirIntegerAttrGetValueUInt", fn (MlirAttribute) -> UInt64
    ]()(attr)


fn mlirIntegerAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of an Integer attribute."""
    return MLIR_func["mlirIntegerAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  Bool attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsABool(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is a bool attribute."""
    return MLIR_func["mlirAttributeIsABool", fn (MlirAttribute) -> Bool]()(attr)


fn mlirBoolAttrGet(ctx: MlirContext, value: Int16) -> MlirAttribute:
    """Creates a bool attribute in the given context with the given value."""
    return MLIR_func[
        "mlirBoolAttrGet", fn (MlirContext, Int16) -> MlirAttribute
    ]()(ctx, value)


fn mlirBoolAttrGetValue(attr: MlirAttribute) -> Bool:
    """Returns the value stored in the given bool attribute."""
    return MLIR_func["mlirBoolAttrGetValue", fn (MlirAttribute) -> Bool]()(attr)


# ===----------------------------------------------------------------------===//
#  Integer set attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsAIntegerSet(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is an integer set attribute."""
    return MLIR_func[
        "mlirAttributeIsAIntegerSet", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirIntegerSetAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of an IntegerSet attribute."""
    return MLIR_func["mlirIntegerSetAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  Opaque attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsAOpaque(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is an opaque attribute."""
    return MLIR_func["mlirAttributeIsAOpaque", fn (MlirAttribute) -> Bool]()(
        attr
    )


fn mlirOpaqueAttrGet(
    ctx: MlirContext,
    dialect_namespace: MlirStringRef,
    data_length: Int,
    data: Pointer[Int8],
    type: MlirType,
) -> MlirAttribute:
    """Creates an opaque attribute in the given context associated with the dialect
    identified by its namespace. The attribute contains opaque byte data of the
    specified length (data need not be null-terminated)."""
    return MLIR_func[
        "mlirOpaqueAttrGet",
        fn (
            MlirContext, MlirStringRef, Int, Pointer[Int8], MlirType
        ) -> MlirAttribute,
    ]()(ctx, dialect_namespace, data_length, data, type)


fn mlirOpaqueAttrGetDialectNamespace(attr: MlirAttribute) -> MlirStringRef:
    """Returns the namespace of the dialect with which the given opaque attribute
    is associated. The namespace string is owned by the context."""
    return MLIR_func[
        "mlirOpaqueAttrGetDialectNamespace", fn (MlirAttribute) -> MlirStringRef
    ]()(attr)


fn mlirOpaqueAttrGetData(attr: MlirAttribute) -> MlirStringRef:
    """Returns the raw data as a string reference. The data remains live as long as
    the context in which the attribute lives."""
    return MLIR_func[
        "mlirOpaqueAttrGetData", fn (MlirAttribute) -> MlirStringRef
    ]()(attr)


fn mlirOpaqueAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of an Opaque attribute."""
    return MLIR_func["mlirOpaqueAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  String attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsAString(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is a string attribute."""
    return MLIR_func["mlirAttributeIsAString", fn (MlirAttribute) -> Bool]()(
        attr
    )


#  Creates a string attribute in the given context containing the given string.


fn mlirStringAttrGet(ctx: MlirContext, str: MlirStringRef) -> MlirAttribute:
    """Creates a string attribute in the given context containing the given string.
    """
    return MLIR_func[
        "mlirStringAttrGet", fn (MlirContext, MlirStringRef) -> MlirAttribute
    ]()(ctx, str)


fn mlirStringAttrTypedGet(type: MlirType, str: MlirStringRef) -> MlirAttribute:
    """Creates a string attribute in the given context containing the given string.
    Additionally, the attribute has the given type."""
    return MLIR_func[
        "mlirStringAttrTypedGet", fn (MlirType, MlirStringRef) -> MlirAttribute
    ]()(type, str)


fn mlirStringAttrGetValue(attr: MlirAttribute) -> MlirStringRef:
    """Returns the attribute values as a string reference. The data remains live as
    long as the context in which the attribute lives."""
    return MLIR_func[
        "mlirStringAttrGetValue", fn (MlirAttribute) -> MlirStringRef
    ]()(attr)


fn mlirStringAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of a String attribute."""
    return MLIR_func["mlirStringAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  SymbolRef attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsASymbolRef(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is a symbol reference attribute."""
    return MLIR_func["mlirAttributeIsASymbolRef", fn (MlirAttribute) -> Bool]()(
        attr
    )


fn mlirSymbolRefAttrGet(
    ctx: MlirContext,
    symbol: MlirStringRef,
    num_references: Int,
    references: Pointer[MlirAttribute],
) -> MlirAttribute:
    """Creates a symbol reference attribute in the given context referencing a
    symbol identified by the given string inside a list of nested references.
    Each of the references in the list must not be nested."""
    return MLIR_func[
        "mlirSymbolRefAttrGet",
        fn (
            MlirContext, MlirStringRef, Int, Pointer[MlirAttribute]
        ) -> MlirAttribute,
    ]()(ctx, symbol, num_references, references)


fn mlirSymbolRefAttrGetRootReference(attr: MlirAttribute) -> MlirStringRef:
    """Returns the string reference to the root referenced symbol. The data remains
    live as long as the context in which the attribute lives."""
    return MLIR_func[
        "mlirSymbolRefAttrGetRootReference", fn (MlirAttribute) -> MlirStringRef
    ]()(attr)


fn mlirSymbolRefAttrGetLeafReference(attr: MlirAttribute) -> MlirStringRef:
    """Returns the string reference to the leaf referenced symbol. The data remains
    live as long as the context in which the attribute lives."""
    return MLIR_func[
        "mlirSymbolRefAttrGetLeafReference", fn (MlirAttribute) -> MlirStringRef
    ]()(attr)


fn mlirSymbolRefAttrGetNumNestedReferences(attr: MlirAttribute) -> Int:
    """Returns the number of references nested in the given symbol reference
    attribute."""
    return MLIR_func[
        "mlirSymbolRefAttrGetNumNestedReferences", fn (MlirAttribute) -> Int
    ]()(attr)


fn mlirSymbolRefAttrGetNestedReference(
    attr: MlirAttribute, pos: Int
) -> MlirAttribute:
    """Returns pos-th reference nested in the given symbol reference attribute.
    """
    return MLIR_func[
        "mlirSymbolRefAttrGetNestedReference",
        fn (MlirAttribute, Int) -> MlirAttribute,
    ]()(attr, pos)


fn mlirSymbolRefAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of an SymbolRef attribute."""
    return MLIR_func["mlirSymbolRefAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  Flat SymbolRef attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsAFlatSymbolRef(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is a flat symbol reference attribute.
    """
    return MLIR_func[
        "mlirAttributeIsAFlatSymbolRef", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirFlatSymbolRefAttrGet(
    ctx: MlirContext, symbol: MlirStringRef
) -> MlirAttribute:
    """Creates a flat symbol reference attribute in the given context referencing a
    symbol identified by the given string."""
    return MLIR_func[
        "mlirFlatSymbolRefAttrGet",
        fn (MlirContext, MlirStringRef) -> MlirAttribute,
    ]()(ctx, symbol)


fn mlirFlatSymbolRefAttrGetValue(attr: MlirAttribute) -> MlirStringRef:
    """Returns the referenced symbol as a string reference. The data remains live
    as long as the context in which the attribute lives."""
    return MLIR_func[
        "mlirFlatSymbolRefAttrGetValue", fn (MlirAttribute) -> MlirStringRef
    ]()(attr)


# ===----------------------------------------------------------------------===//
#  Type attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsAType(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is a type attribute."""
    return MLIR_func["mlirAttributeIsAType", fn (MlirAttribute) -> Bool]()(attr)


fn mlirTypeAttrGet(type: MlirType) -> MlirAttribute:
    """Creates a type attribute wrapping the given type in the same context as the
    type."""
    return MLIR_func["mlirTypeAttrGet", fn (MlirType) -> MlirAttribute]()(type)


fn mlirTypeAttrGetValue(attr: MlirAttribute) -> MlirType:
    """Returns the type stored in the given type attribute."""
    return MLIR_func["mlirTypeAttrGetValue", fn (MlirAttribute) -> MlirType]()(
        attr
    )


fn mlirTypeAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of a Type attribute."""
    return MLIR_func["mlirTypeAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  Unit attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsAUnit(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is a unit attribute."""
    return MLIR_func["mlirAttributeIsAUnit", fn (MlirAttribute) -> Bool]()(attr)


fn mlirUnitAttrGet(ctx: MlirContext) -> MlirAttribute:
    """Creates a unit attribute in the given context."""
    return MLIR_func["mlirUnitAttrGet", fn (MlirContext) -> MlirAttribute]()(
        ctx
    )


fn mlirUnitAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of a Unit attribute."""
    return MLIR_func["mlirUnitAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  Elements attributes.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsAElements(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is an elements attribute."""
    return MLIR_func["mlirAttributeIsAElements", fn (MlirAttribute) -> Bool]()(
        attr
    )


fn mlirElementsAttrGetValue(
    attr: MlirAttribute, rank: Int, idxs: Pointer[UInt64]
) -> MlirAttribute:
    """Returns the element at the given rank-dimensional index."""
    return MLIR_func[
        "mlirElementsAttrGetValue",
        fn (MlirAttribute, Int, Pointer[UInt64]) -> MlirAttribute,
    ]()(attr, rank, idxs)


fn mlirElementsAttrIsValidIndex(
    attr: MlirAttribute, rank: Int, idxs: Pointer[UInt64]
) -> Bool:
    """Checks whether the given rank-dimensional index is valid in the given
    elements attribute."""
    return MLIR_func[
        "mlirElementsAttrIsValidIndex",
        fn (MlirAttribute, Int, Pointer[UInt64]) -> Bool,
    ]()(attr, rank, idxs)


fn mlirElementsAttrGetNumElements(attr: MlirAttribute) -> Int64:
    """Gets the total number of elements in the given elements attribute. In order
    to iterate over the attribute, obtain its type, which must be a statically
    shaped type and use its sizes to build a multi-dimensional index."""
    return MLIR_func[
        "mlirElementsAttrGetNumElements", fn (MlirAttribute) -> Int64
    ]()(attr)


# ===----------------------------------------------------------------------===//
#  Dense array attribute.
# ===----------------------------------------------------------------------===//


fn mlirDenseArrayAttrGetTypeID() -> MlirTypeID:
    return MLIR_func["mlirDenseArrayAttrGetTypeID", fn () -> MlirTypeID]()()


fn mlirAttributeIsADenseBoolArray(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is a dense array attribute."""
    return MLIR_func[
        "mlirAttributeIsADenseBoolArray", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirAttributeIsADenseI8Array(attr: MlirAttribute) -> Bool:
    return MLIR_func[
        "mlirAttributeIsADenseI8Array", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirAttributeIsADenseI16Array(attr: MlirAttribute) -> Bool:
    return MLIR_func[
        "mlirAttributeIsADenseI16Array", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirAttributeIsADenseI32Array(attr: MlirAttribute) -> Bool:
    return MLIR_func[
        "mlirAttributeIsADenseI32Array", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirAttributeIsADenseI64Array(attr: MlirAttribute) -> Bool:
    return MLIR_func[
        "mlirAttributeIsADenseI64Array", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirAttributeIsADenseF32Array(attr: MlirAttribute) -> Bool:
    return MLIR_func[
        "mlirAttributeIsADenseF32Array", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirAttributeIsADenseF64Array(attr: MlirAttribute) -> Bool:
    return MLIR_func[
        "mlirAttributeIsADenseF64Array", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirDenseBoolArrayGet(
    ctx: MlirContext, size: Int, values: Pointer[Int16]
) -> MlirAttribute:
    """Create a dense array attribute with the given elements."""
    return MLIR_func[
        "mlirDenseBoolArrayGet",
        fn (MlirContext, Int, Pointer[Int16]) -> MlirAttribute,
    ]()(ctx, size, values)


fn mlirDenseI8ArrayGet(
    ctx: MlirContext, size: Int, values: Pointer[Int8]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseI8ArrayGet",
        fn (MlirContext, Int, Pointer[Int8]) -> MlirAttribute,
    ]()(ctx, size, values)


fn mlirDenseI16ArrayGet(
    ctx: MlirContext, size: Int, values: Pointer[Int16]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseI16ArrayGet",
        fn (MlirContext, Int, Pointer[Int16]) -> MlirAttribute,
    ]()(ctx, size, values)


fn mlirDenseI32ArrayGet(
    ctx: MlirContext, size: Int, values: Pointer[Int32]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseI32ArrayGet",
        fn (MlirContext, Int, Pointer[Int32]) -> MlirAttribute,
    ]()(ctx, size, values)


fn mlirDenseI64ArrayGet(
    ctx: MlirContext, size: Int, values: Pointer[Int64]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseI64ArrayGet",
        fn (MlirContext, Int, Pointer[Int64]) -> MlirAttribute,
    ]()(ctx, size, values)


fn mlirDenseF32ArrayGet(
    ctx: MlirContext, size: Int, values: Pointer[Float32]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseF32ArrayGet",
        fn (MlirContext, Int, Pointer[Float32]) -> MlirAttribute,
    ]()(ctx, size, values)


fn mlirDenseF64ArrayGet(
    ctx: MlirContext, size: Int, values: Pointer[Float64]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseF64ArrayGet",
        fn (MlirContext, Int, Pointer[Float64]) -> MlirAttribute,
    ]()(ctx, size, values)


fn mlirDenseArrayGetNumElements(attr: MlirAttribute) -> Int:
    """Get the size of a dense array."""
    return MLIR_func[
        "mlirDenseArrayGetNumElements", fn (MlirAttribute) -> Int
    ]()(attr)


fn mlirDenseBoolArrayGetElement(attr: MlirAttribute, pos: Int) -> Bool:
    """Get an element of a dense array."""
    return MLIR_func[
        "mlirDenseBoolArrayGetElement", fn (MlirAttribute, Int) -> Bool
    ]()(attr, pos)


fn mlirDenseI8ArrayGetElement(attr: MlirAttribute, pos: Int) -> Int8:
    return MLIR_func[
        "mlirDenseI8ArrayGetElement", fn (MlirAttribute, Int) -> Int8
    ]()(attr, pos)


fn mlirDenseI16ArrayGetElement(attr: MlirAttribute, pos: Int) -> Int16:
    return MLIR_func[
        "mlirDenseI16ArrayGetElement", fn (MlirAttribute, Int) -> Int16
    ]()(attr, pos)


fn mlirDenseI32ArrayGetElement(attr: MlirAttribute, pos: Int) -> Int32:
    return MLIR_func[
        "mlirDenseI32ArrayGetElement", fn (MlirAttribute, Int) -> Int32
    ]()(attr, pos)


fn mlirDenseI64ArrayGetElement(attr: MlirAttribute, pos: Int) -> Int64:
    return MLIR_func[
        "mlirDenseI64ArrayGetElement", fn (MlirAttribute, Int) -> Int64
    ]()(attr, pos)


fn mlirDenseF32ArrayGetElement(attr: MlirAttribute, pos: Int) -> Float32:
    return MLIR_func[
        "mlirDenseF32ArrayGetElement", fn (MlirAttribute, Int) -> Float32
    ]()(attr, pos)


fn mlirDenseF64ArrayGetElement(attr: MlirAttribute, pos: Int) -> Float64:
    return MLIR_func[
        "mlirDenseF64ArrayGetElement", fn (MlirAttribute, Int) -> Float64
    ]()(attr, pos)


# ===----------------------------------------------------------------------===//
#  Dense elements attribute.
# ===----------------------------------------------------------------------===//

#  TODO: decide on the interface and add support for complex elements.
#  TODO: add support for APFloat and APInt to LLVM IR C API, then expose the
#  relevant functions here.


fn mlirAttributeIsADenseElements(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is a dense elements attribute."""
    return MLIR_func[
        "mlirAttributeIsADenseElements", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirAttributeIsADenseIntElements(attr: MlirAttribute) -> Bool:
    return MLIR_func[
        "mlirAttributeIsADenseIntElements", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirAttributeIsADenseFPElements(attr: MlirAttribute) -> Bool:
    return MLIR_func[
        "mlirAttributeIsADenseFPElements", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirDenseIntOrFPElementsAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of an DenseIntOrFPElements attribute."""
    return MLIR_func[
        "mlirDenseIntOrFPElementsAttrGetTypeID", fn () -> MlirTypeID
    ]()()


fn mlirDenseElementsAttrGet(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[MlirAttribute]
) -> MlirAttribute:
    """Creates a dense elements attribute with the given Shaped type and elements
    in the same context as the type."""
    return MLIR_func[
        "mlirDenseElementsAttrGet",
        fn (MlirType, Int, Pointer[MlirAttribute]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrRawBufferGet(
    shaped_type: MlirType, raw_buffer_size: Int, raw_buffer: Pointer[NoneType]
) -> MlirAttribute:
    """Creates a dense elements attribute with the given Shaped type and elements
    populated from a packed, row-major opaque buffer of contents.

    The format of the raw buffer is a densely packed array of values that
    can be bitcast to the storage format of the element type specified.
    Types that are not byte aligned will be:
      - For bitwidth > 1: Rounded up to the next byte.
      - For bitwidth = 1: Packed into 8bit bytes with bits corresponding to
        the linear order of the shape type from MSB to LSB, padded to on the
        right.

    A raw buffer of a single element (or for 1-bit, a byte of value 0 or 255)
    will be interpreted as a splat. User code should be prepared for additional,
    conformant patterns to be identified as splats in the future."""
    return MLIR_func[
        "mlirDenseElementsAttrRawBufferGet",
        fn (MlirType, Int, Pointer[NoneType]) -> MlirAttribute,
    ]()(shaped_type, raw_buffer_size, raw_buffer)


fn mlirDenseElementsAttrSplatGet(
    shaped_type: MlirType, element: MlirAttribute
) -> MlirAttribute:
    """Creates a dense elements attribute with the given Shaped type containing a
    single replicated element (splat)."""
    return MLIR_func[
        "mlirDenseElementsAttrSplatGet",
        fn (MlirType, MlirAttribute) -> MlirAttribute,
    ]()(shaped_type, element)


fn mlirDenseElementsAttrBoolSplatGet(
    shaped_type: MlirType, element: Bool
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrBoolSplatGet",
        fn (MlirType, Bool) -> MlirAttribute,
    ]()(shaped_type, element)


fn mlirDenseElementsAttrUInt8SplatGet(
    shaped_type: MlirType, element: UInt8
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrUInt8SplatGet",
        fn (MlirType, UInt8) -> MlirAttribute,
    ]()(shaped_type, element)


fn mlirDenseElementsAttrInt8SplatGet(
    shaped_type: MlirType, element: Int8
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrInt8SplatGet",
        fn (MlirType, Int8) -> MlirAttribute,
    ]()(shaped_type, element)


fn mlirDenseElementsAttrUInt32SplatGet(
    shaped_type: MlirType, element: UInt32
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrUInt32SplatGet",
        fn (MlirType, UInt32) -> MlirAttribute,
    ]()(shaped_type, element)


fn mlirDenseElementsAttrInt32SplatGet(
    shaped_type: MlirType, element: Int32
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrInt32SplatGet",
        fn (MlirType, Int32) -> MlirAttribute,
    ]()(shaped_type, element)


fn mlirDenseElementsAttrUInt64SplatGet(
    shaped_type: MlirType, element: UInt64
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrUInt64SplatGet",
        fn (MlirType, UInt64) -> MlirAttribute,
    ]()(shaped_type, element)


fn mlirDenseElementsAttrInt64SplatGet(
    shaped_type: MlirType, element: Int64
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrInt64SplatGet",
        fn (MlirType, Int64) -> MlirAttribute,
    ]()(shaped_type, element)


fn mlirDenseElementsAttrFloatSplatGet(
    shaped_type: MlirType, element: Float32
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrFloatSplatGet",
        fn (MlirType, Float32) -> MlirAttribute,
    ]()(shaped_type, element)


fn mlirDenseElementsAttrDoubleSplatGet(
    shaped_type: MlirType, element: Float64
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrDoubleSplatGet",
        fn (MlirType, Float64) -> MlirAttribute,
    ]()(shaped_type, element)


fn mlirDenseElementsAttrBoolGet(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[Int16]
) -> MlirAttribute:
    """Creates a dense elements attribute with the given shaped type from elements
    of a specific type. Expects the element type of the shaped type to match the
    data element type."""
    return MLIR_func[
        "mlirDenseElementsAttrBoolGet",
        fn (MlirType, Int, Pointer[Int16]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrUInt8Get(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[UInt8]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrUInt8Get",
        fn (MlirType, Int, Pointer[UInt8]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrInt8Get(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[Int8]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrInt8Get",
        fn (MlirType, Int, Pointer[Int8]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrUInt16Get(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[UInt16]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrUInt16Get",
        fn (MlirType, Int, Pointer[UInt16]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrInt16Get(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[Int16]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrInt16Get",
        fn (MlirType, Int, Pointer[Int16]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrUInt32Get(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[UInt32]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrUInt32Get",
        fn (MlirType, Int, Pointer[UInt32]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrInt32Get(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[Int32]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrInt32Get",
        fn (MlirType, Int, Pointer[Int32]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrUInt64Get(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[UInt64]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrUInt64Get",
        fn (MlirType, Int, Pointer[UInt64]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrInt64Get(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[Int64]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrInt64Get",
        fn (MlirType, Int, Pointer[Int64]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrFloatGet(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[Float32]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrFloatGet",
        fn (MlirType, Int, Pointer[Float32]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrDoubleGet(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[Float64]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrDoubleGet",
        fn (MlirType, Int, Pointer[Float64]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrBFloat16Get(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[UInt16]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrBFloat16Get",
        fn (MlirType, Int, Pointer[UInt16]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrFloat16Get(
    shaped_type: MlirType, num_elements: Int, elements: Pointer[UInt16]
) -> MlirAttribute:
    return MLIR_func[
        "mlirDenseElementsAttrFloat16Get",
        fn (MlirType, Int, Pointer[UInt16]) -> MlirAttribute,
    ]()(shaped_type, num_elements, elements)


fn mlirDenseElementsAttrStringGet(
    shaped_type: MlirType, num_elements: Int, strs: Pointer[MlirStringRef]
) -> MlirAttribute:
    """Creates a dense elements attribute with the given shaped type from string
    elements."""
    return MLIR_func[
        "mlirDenseElementsAttrStringGet",
        fn (MlirType, Int, Pointer[MlirStringRef]) -> MlirAttribute,
    ]()(shaped_type, num_elements, strs)


fn mlirDenseElementsAttrReshapeGet(
    attr: MlirAttribute, shaped_type: MlirType
) -> MlirAttribute:
    """Creates a dense elements attribute that has the same data as the given dense
    elements attribute and a different shaped type. The new type must have the
    same total number of elements."""
    return MLIR_func[
        "mlirDenseElementsAttrReshapeGet",
        fn (MlirAttribute, MlirType) -> MlirAttribute,
    ]()(attr, shaped_type)


fn mlirDenseElementsAttrIsSplat(attr: MlirAttribute) -> Bool:
    """Checks whether the given dense elements attribute contains a single
    replicated value (splat)."""
    return MLIR_func[
        "mlirDenseElementsAttrIsSplat", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirDenseElementsAttrGetSplatValue(attr: MlirAttribute) -> MlirAttribute:
    """Returns the single replicated value (splat) of a specific type contained by
    the given dense elements attribute."""
    return MLIR_func[
        "mlirDenseElementsAttrGetSplatValue",
        fn (MlirAttribute) -> MlirAttribute,
    ]()(attr)


fn mlirDenseElementsAttrGetBoolSplatValue(attr: MlirAttribute) -> Int16:
    return MLIR_func[
        "mlirDenseElementsAttrGetBoolSplatValue", fn (MlirAttribute) -> Int16
    ]()(attr)


fn mlirDenseElementsAttrGetInt8SplatValue(attr: MlirAttribute) -> Int8:
    return MLIR_func[
        "mlirDenseElementsAttrGetInt8SplatValue", fn (MlirAttribute) -> Int8
    ]()(attr)


fn mlirDenseElementsAttrGetUInt8SplatValue(attr: MlirAttribute) -> UInt8:
    return MLIR_func[
        "mlirDenseElementsAttrGetUInt8SplatValue", fn (MlirAttribute) -> UInt8
    ]()(attr)


fn mlirDenseElementsAttrGetInt32SplatValue(attr: MlirAttribute) -> Int32:
    return MLIR_func[
        "mlirDenseElementsAttrGetInt32SplatValue", fn (MlirAttribute) -> Int32
    ]()(attr)


fn mlirDenseElementsAttrGetUInt32SplatValue(attr: MlirAttribute) -> UInt32:
    return MLIR_func[
        "mlirDenseElementsAttrGetUInt32SplatValue", fn (MlirAttribute) -> UInt32
    ]()(attr)


fn mlirDenseElementsAttrGetInt64SplatValue(attr: MlirAttribute) -> Int64:
    return MLIR_func[
        "mlirDenseElementsAttrGetInt64SplatValue", fn (MlirAttribute) -> Int64
    ]()(attr)


fn mlirDenseElementsAttrGetUInt64SplatValue(attr: MlirAttribute) -> UInt64:
    return MLIR_func[
        "mlirDenseElementsAttrGetUInt64SplatValue", fn (MlirAttribute) -> UInt64
    ]()(attr)


fn mlirDenseElementsAttrGetFloatSplatValue(attr: MlirAttribute) -> Float32:
    return MLIR_func[
        "mlirDenseElementsAttrGetFloatSplatValue", fn (MlirAttribute) -> Float32
    ]()(attr)


fn mlirDenseElementsAttrGetDoubleSplatValue(attr: MlirAttribute) -> Float64:
    return MLIR_func[
        "mlirDenseElementsAttrGetDoubleSplatValue",
        fn (MlirAttribute) -> Float64,
    ]()(attr)


fn mlirDenseElementsAttrGetStringSplatValue(
    attr: MlirAttribute,
) -> MlirStringRef:
    return MLIR_func[
        "mlirDenseElementsAttrGetStringSplatValue",
        fn (MlirAttribute) -> MlirStringRef,
    ]()(attr)


fn mlirDenseElementsAttrGetBoolValue(attr: MlirAttribute, pos: Int) -> Bool:
    """Returns the pos-th value (flat contiguous indexing) of a specific type
    contained by the given dense elements attribute."""
    return MLIR_func[
        "mlirDenseElementsAttrGetBoolValue", fn (MlirAttribute, Int) -> Bool
    ]()(attr, pos)


fn mlirDenseElementsAttrGetInt8Value(attr: MlirAttribute, pos: Int) -> Int8:
    return MLIR_func[
        "mlirDenseElementsAttrGetInt8Value", fn (MlirAttribute, Int) -> Int8
    ]()(attr, pos)


fn mlirDenseElementsAttrGetUInt8Value(attr: MlirAttribute, pos: Int) -> UInt8:
    return MLIR_func[
        "mlirDenseElementsAttrGetUInt8Value", fn (MlirAttribute, Int) -> UInt8
    ]()(attr, pos)


fn mlirDenseElementsAttrGetInt16Value(attr: MlirAttribute, pos: Int) -> Int16:
    return MLIR_func[
        "mlirDenseElementsAttrGetInt16Value", fn (MlirAttribute, Int) -> Int16
    ]()(attr, pos)


fn mlirDenseElementsAttrGetUInt16Value(attr: MlirAttribute, pos: Int) -> UInt16:
    return MLIR_func[
        "mlirDenseElementsAttrGetUInt16Value", fn (MlirAttribute, Int) -> UInt16
    ]()(attr, pos)


fn mlirDenseElementsAttrGetInt32Value(attr: MlirAttribute, pos: Int) -> Int32:
    return MLIR_func[
        "mlirDenseElementsAttrGetInt32Value", fn (MlirAttribute, Int) -> Int32
    ]()(attr, pos)


fn mlirDenseElementsAttrGetUInt32Value(attr: MlirAttribute, pos: Int) -> UInt32:
    return MLIR_func[
        "mlirDenseElementsAttrGetUInt32Value", fn (MlirAttribute, Int) -> UInt32
    ]()(attr, pos)


fn mlirDenseElementsAttrGetInt64Value(attr: MlirAttribute, pos: Int) -> Int64:
    return MLIR_func[
        "mlirDenseElementsAttrGetInt64Value", fn (MlirAttribute, Int) -> Int64
    ]()(attr, pos)


fn mlirDenseElementsAttrGetUInt64Value(attr: MlirAttribute, pos: Int) -> UInt64:
    return MLIR_func[
        "mlirDenseElementsAttrGetUInt64Value", fn (MlirAttribute, Int) -> UInt64
    ]()(attr, pos)


fn mlirDenseElementsAttrGetFloatValue(attr: MlirAttribute, pos: Int) -> Float32:
    return MLIR_func[
        "mlirDenseElementsAttrGetFloatValue", fn (MlirAttribute, Int) -> Float32
    ]()(attr, pos)


fn mlirDenseElementsAttrGetDoubleValue(
    attr: MlirAttribute, pos: Int
) -> Float64:
    return MLIR_func[
        "mlirDenseElementsAttrGetDoubleValue",
        fn (MlirAttribute, Int) -> Float64,
    ]()(attr, pos)


fn mlirDenseElementsAttrGetStringValue(
    attr: MlirAttribute, pos: Int
) -> MlirStringRef:
    return MLIR_func[
        "mlirDenseElementsAttrGetStringValue",
        fn (MlirAttribute, Int) -> MlirStringRef,
    ]()(attr, pos)


fn mlirDenseElementsAttrGetRawData(attr: MlirAttribute) -> Pointer[NoneType]:
    """Returns the raw data of the given dense elements attribute."""
    return MLIR_func[
        "mlirDenseElementsAttrGetRawData",
        fn (MlirAttribute) -> Pointer[NoneType],
    ]()(attr)


# ===----------------------------------------------------------------------===//
#  Resource blob attributes.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsADenseResourceElements(attr: MlirAttribute) -> Bool:
    return MLIR_func[
        "mlirAttributeIsADenseResourceElements", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirUnmanagedDenseResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    data: Pointer[NoneType],
    data_length: Int,
    data_alignment: Int,
    data_is_mutable: Bool,
    deleter: fn (
        Pointer[NoneType], Pointer[NoneType], Int32, Int32
    ) -> NoneType,
    user_data: Pointer[NoneType],
) -> MlirAttribute:
    """Unlike the typed accessors below, constructs the attribute with a raw
    data buffer and no type/alignment checking. Use a more strongly typed
    accessor if possible. If dataIsMutable is false, then an immutable
    AsmResourceBlob will be created and that passed data contents will be
    treated as const.
    If the deleter is non NULL, then it will be called when the data buffer
    can no longer be accessed (passing userData to it)."""
    return MLIR_func[
        "mlirUnmanagedDenseResourceElementsAttrGet",
        fn (
            MlirType,
            MlirStringRef,
            Pointer[NoneType],
            Int,
            Int,
            Bool,
            fn (Pointer[NoneType], Pointer[NoneType], Int32, Int32) -> NoneType,
            Pointer[NoneType],
        ) -> MlirAttribute,
    ]()(
        shaped_type,
        name,
        data,
        data_length,
        data_alignment,
        data_is_mutable,
        deleter,
        user_data,
    )


fn mlirUnmanagedDenseBoolResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    num_elements: Int,
    elements: Pointer[Int16],
) -> MlirAttribute:
    return MLIR_func[
        "mlirUnmanagedDenseBoolResourceElementsAttrGet",
        fn (MlirType, MlirStringRef, Int, Pointer[Int16]) -> MlirAttribute,
    ]()(shaped_type, name, num_elements, elements)


fn mlirUnmanagedDenseUInt8ResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    num_elements: Int,
    elements: Pointer[UInt8],
) -> MlirAttribute:
    return MLIR_func[
        "mlirUnmanagedDenseUInt8ResourceElementsAttrGet",
        fn (MlirType, MlirStringRef, Int, Pointer[UInt8]) -> MlirAttribute,
    ]()(shaped_type, name, num_elements, elements)


fn mlirUnmanagedDenseInt8ResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    num_elements: Int,
    elements: Pointer[Int8],
) -> MlirAttribute:
    return MLIR_func[
        "mlirUnmanagedDenseInt8ResourceElementsAttrGet",
        fn (MlirType, MlirStringRef, Int, Pointer[Int8]) -> MlirAttribute,
    ]()(shaped_type, name, num_elements, elements)


fn mlirUnmanagedDenseUInt16ResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    num_elements: Int,
    elements: Pointer[UInt16],
) -> MlirAttribute:
    return MLIR_func[
        "mlirUnmanagedDenseUInt16ResourceElementsAttrGet",
        fn (MlirType, MlirStringRef, Int, Pointer[UInt16]) -> MlirAttribute,
    ]()(shaped_type, name, num_elements, elements)


fn mlirUnmanagedDenseInt16ResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    num_elements: Int,
    elements: Pointer[Int16],
) -> MlirAttribute:
    return MLIR_func[
        "mlirUnmanagedDenseInt16ResourceElementsAttrGet",
        fn (MlirType, MlirStringRef, Int, Pointer[Int16]) -> MlirAttribute,
    ]()(shaped_type, name, num_elements, elements)


fn mlirUnmanagedDenseUInt32ResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    num_elements: Int,
    elements: Pointer[UInt32],
) -> MlirAttribute:
    return MLIR_func[
        "mlirUnmanagedDenseUInt32ResourceElementsAttrGet",
        fn (MlirType, MlirStringRef, Int, Pointer[UInt32]) -> MlirAttribute,
    ]()(shaped_type, name, num_elements, elements)


fn mlirUnmanagedDenseInt32ResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    num_elements: Int,
    elements: Pointer[Int32],
) -> MlirAttribute:
    return MLIR_func[
        "mlirUnmanagedDenseInt32ResourceElementsAttrGet",
        fn (MlirType, MlirStringRef, Int, Pointer[Int32]) -> MlirAttribute,
    ]()(shaped_type, name, num_elements, elements)


fn mlirUnmanagedDenseUInt64ResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    num_elements: Int,
    elements: Pointer[UInt64],
) -> MlirAttribute:
    return MLIR_func[
        "mlirUnmanagedDenseUInt64ResourceElementsAttrGet",
        fn (MlirType, MlirStringRef, Int, Pointer[UInt64]) -> MlirAttribute,
    ]()(shaped_type, name, num_elements, elements)


fn mlirUnmanagedDenseInt64ResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    num_elements: Int,
    elements: Pointer[Int64],
) -> MlirAttribute:
    return MLIR_func[
        "mlirUnmanagedDenseInt64ResourceElementsAttrGet",
        fn (MlirType, MlirStringRef, Int, Pointer[Int64]) -> MlirAttribute,
    ]()(shaped_type, name, num_elements, elements)


fn mlirUnmanagedDenseFloatResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    num_elements: Int,
    elements: Pointer[Float32],
) -> MlirAttribute:
    return MLIR_func[
        "mlirUnmanagedDenseFloatResourceElementsAttrGet",
        fn (MlirType, MlirStringRef, Int, Pointer[Float32]) -> MlirAttribute,
    ]()(shaped_type, name, num_elements, elements)


fn mlirUnmanagedDenseDoubleResourceElementsAttrGet(
    shaped_type: MlirType,
    name: MlirStringRef,
    num_elements: Int,
    elements: Pointer[Float64],
) -> MlirAttribute:
    return MLIR_func[
        "mlirUnmanagedDenseDoubleResourceElementsAttrGet",
        fn (MlirType, MlirStringRef, Int, Pointer[Float64]) -> MlirAttribute,
    ]()(shaped_type, name, num_elements, elements)


fn mlirDenseBoolResourceElementsAttrGetValue(
    attr: MlirAttribute, pos: Int
) -> Bool:
    """Returns the pos-th value (flat contiguous indexing) of a specific type
    contained by the given dense resource elements attribute."""
    return MLIR_func[
        "mlirDenseBoolResourceElementsAttrGetValue",
        fn (MlirAttribute, Int) -> Bool,
    ]()(attr, pos)


fn mlirDenseInt8ResourceElementsAttrGetValue(
    attr: MlirAttribute, pos: Int
) -> Int8:
    return MLIR_func[
        "mlirDenseInt8ResourceElementsAttrGetValue",
        fn (MlirAttribute, Int) -> Int8,
    ]()(attr, pos)


fn mlirDenseUInt8ResourceElementsAttrGetValue(
    attr: MlirAttribute, pos: Int
) -> UInt8:
    return MLIR_func[
        "mlirDenseUInt8ResourceElementsAttrGetValue",
        fn (MlirAttribute, Int) -> UInt8,
    ]()(attr, pos)


fn mlirDenseInt16ResourceElementsAttrGetValue(
    attr: MlirAttribute, pos: Int
) -> Int16:
    return MLIR_func[
        "mlirDenseInt16ResourceElementsAttrGetValue",
        fn (MlirAttribute, Int) -> Int16,
    ]()(attr, pos)


fn mlirDenseUInt16ResourceElementsAttrGetValue(
    attr: MlirAttribute, pos: Int
) -> UInt16:
    return MLIR_func[
        "mlirDenseUInt16ResourceElementsAttrGetValue",
        fn (MlirAttribute, Int) -> UInt16,
    ]()(attr, pos)


fn mlirDenseInt32ResourceElementsAttrGetValue(
    attr: MlirAttribute, pos: Int
) -> Int32:
    return MLIR_func[
        "mlirDenseInt32ResourceElementsAttrGetValue",
        fn (MlirAttribute, Int) -> Int32,
    ]()(attr, pos)


fn mlirDenseUInt32ResourceElementsAttrGetValue(
    attr: MlirAttribute, pos: Int
) -> UInt32:
    return MLIR_func[
        "mlirDenseUInt32ResourceElementsAttrGetValue",
        fn (MlirAttribute, Int) -> UInt32,
    ]()(attr, pos)


fn mlirDenseInt64ResourceElementsAttrGetValue(
    attr: MlirAttribute, pos: Int
) -> Int64:
    return MLIR_func[
        "mlirDenseInt64ResourceElementsAttrGetValue",
        fn (MlirAttribute, Int) -> Int64,
    ]()(attr, pos)


fn mlirDenseUInt64ResourceElementsAttrGetValue(
    attr: MlirAttribute, pos: Int
) -> UInt64:
    return MLIR_func[
        "mlirDenseUInt64ResourceElementsAttrGetValue",
        fn (MlirAttribute, Int) -> UInt64,
    ]()(attr, pos)


fn mlirDenseFloatResourceElementsAttrGetValue(
    attr: MlirAttribute, pos: Int
) -> Float32:
    return MLIR_func[
        "mlirDenseFloatResourceElementsAttrGetValue",
        fn (MlirAttribute, Int) -> Float32,
    ]()(attr, pos)


fn mlirDenseDoubleResourceElementsAttrGetValue(
    attr: MlirAttribute, pos: Int
) -> Float64:
    return MLIR_func[
        "mlirDenseDoubleResourceElementsAttrGetValue",
        fn (MlirAttribute, Int) -> Float64,
    ]()(attr, pos)


# ===----------------------------------------------------------------------===//
#  Sparse elements attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsASparseElements(attr: MlirAttribute) -> Bool:
    """Checks whether the given attribute is a sparse elements attribute."""
    return MLIR_func[
        "mlirAttributeIsASparseElements", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirSparseElementsAttribute(
    shaped_type: MlirType,
    dense_indices: MlirAttribute,
    dense_values: MlirAttribute,
) -> MlirAttribute:
    """Creates a sparse elements attribute of the given shape from a list of
    indices and a list of associated values. Both lists are expected to be dense
    elements attributes with the same number of elements. The list of indices is
    expected to contain 64-bit integers. The attribute is created in the same
    context as the type."""
    return MLIR_func[
        "mlirSparseElementsAttribute",
        fn (MlirType, MlirAttribute, MlirAttribute) -> MlirAttribute,
    ]()(shaped_type, dense_indices, dense_values)


fn mlirSparseElementsAttrGetIndices(attr: MlirAttribute) -> MlirAttribute:
    """Returns the dense elements attribute containing 64-bit integer indices of
    non-null elements in the given sparse elements attribute."""
    return MLIR_func[
        "mlirSparseElementsAttrGetIndices", fn (MlirAttribute) -> MlirAttribute
    ]()(attr)


fn mlirSparseElementsAttrGetValues(attr: MlirAttribute) -> MlirAttribute:
    """Returns the dense elements attribute containing the non-null elements in the
    given sparse elements attribute."""
    return MLIR_func[
        "mlirSparseElementsAttrGetValues", fn (MlirAttribute) -> MlirAttribute
    ]()(attr)


fn mlirSparseElementsAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of a SparseElements attribute."""
    return MLIR_func["mlirSparseElementsAttrGetTypeID", fn () -> MlirTypeID]()()


# ===----------------------------------------------------------------------===//
#  Strided layout attribute.
# ===----------------------------------------------------------------------===//


fn mlirAttributeIsAStridedLayout(attr: MlirAttribute) -> Bool:
    return MLIR_func[
        "mlirAttributeIsAStridedLayout", fn (MlirAttribute) -> Bool
    ]()(attr)


fn mlirStridedLayoutAttrGet(
    ctx: MlirContext, offset: Int64, num_strides: Int, strides: Pointer[Int64]
) -> MlirAttribute:
    return MLIR_func[
        "mlirStridedLayoutAttrGet",
        fn (MlirContext, Int64, Int, Pointer[Int64]) -> MlirAttribute,
    ]()(ctx, offset, num_strides, strides)


fn mlirStridedLayoutAttrGetOffset(attr: MlirAttribute) -> Int64:
    return MLIR_func[
        "mlirStridedLayoutAttrGetOffset", fn (MlirAttribute) -> Int64
    ]()(attr)


fn mlirStridedLayoutAttrGetNumStrides(attr: MlirAttribute) -> Int:
    return MLIR_func[
        "mlirStridedLayoutAttrGetNumStrides", fn (MlirAttribute) -> Int
    ]()(attr)


fn mlirStridedLayoutAttrGetStride(attr: MlirAttribute, pos: Int) -> Int64:
    return MLIR_func[
        "mlirStridedLayoutAttrGetStride", fn (MlirAttribute, Int) -> Int64
    ]()(attr, pos)


fn mlirStridedLayoutAttrGetTypeID() -> MlirTypeID:
    """Returns the typeID of a StridedLayout attribute."""
    return MLIR_func["mlirStridedLayoutAttrGetTypeID", fn () -> MlirTypeID]()()
