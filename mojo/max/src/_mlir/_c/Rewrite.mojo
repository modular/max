# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
#
# GENERATED FILE, DO NOT EDIT!
#
# Last generated by mathieu at 2024-07-16 20:51:42.576193 with command
# ```
#   ./utils/mojo/mlir-bindings/generate_mlir_c_bindings.sh \
#     Rewrite.h
# ```
#
# ===----------------------------------------------------------------------=== #

from .ffi import MLIR_func

# ===-- mlir-c/Rewrite.h - Helpers for C API to Rewrites ----------*- C -*-===//
#
#  Part of the LLVM Project, under the Apache License v2.0 with LLVM
#  Exceptions.
#  See https://llvm.org/LICENSE.txt for license information.
#  SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# ===----------------------------------------------------------------------===//
#
#  This header declares the registration and creation method for
#  rewrite patterns.
#
# ===----------------------------------------------------------------------===//

from .IR import *
from .Support import *

# ===----------------------------------------------------------------------===//
#  Opaque type declarations (see mlir-c/IR.h for more details).
# ===----------------------------------------------------------------------===//


@register_passable("trivial")
struct MlirFrozenRewritePatternSet:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirGreedyRewriteDriverConfig:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirRewritePatternSet:
    var ptr: UnsafePointer[NoneType]


fn mlirFreezeRewritePattern(
    op: MlirRewritePatternSet,
) -> MlirFrozenRewritePatternSet:
    return MLIR_func["mlirFreezeRewritePattern", MlirFrozenRewritePatternSet](
        op
    )


fn mlirFrozenRewritePatternSetDestroy(op: MlirFrozenRewritePatternSet) -> None:
    return MLIR_func["mlirFrozenRewritePatternSetDestroy", NoneType._mlir_type](
        op
    )


fn mlirApplyPatternsAndFoldGreedily(
    op: MlirModule,
    patterns: MlirFrozenRewritePatternSet,
    a: MlirGreedyRewriteDriverConfig,
) -> MlirLogicalResult:
    return MLIR_func["mlirApplyPatternsAndFoldGreedily", MlirLogicalResult](
        op, patterns, a
    )


fn mlirPDLPatternModuleFromModule(op: MlirModule) -> MlirPDLPatternModule:
    return MLIR_func["mlirPDLPatternModuleFromModule", MlirPDLPatternModule](op)


fn mlirPDLPatternModuleDestroy(op: MlirPDLPatternModule) -> None:
    return MLIR_func["mlirPDLPatternModuleDestroy", NoneType._mlir_type](op)


fn mlirRewritePatternSetFromPDLPatternModule(
    op: MlirPDLPatternModule,
) -> MlirRewritePatternSet:
    return MLIR_func[
        "mlirRewritePatternSetFromPDLPatternModule", MlirRewritePatternSet
    ](op)


# ===----------------------------------------------------------------------=== #
#     Codegen: Remaining symbols
# ===----------------------------------------------------------------------=== #


@register_passable("trivial")
struct MlirPDLPatternModule:
    var ptr: UnsafePointer[NoneType]
