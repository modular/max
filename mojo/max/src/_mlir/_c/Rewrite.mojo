# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
#
# GENERATED FILE, DO NOT EDIT!
#
# Last generated by connorgray at 2024-07-03 18:53:29.902064 with command
# ```
#   ./utils/mojo/mlir-bindings/generate_mlir_c_bindings.sh \
#     Rewrite.h
# ```
#
# ===----------------------------------------------------------------------=== #

from .ffi import MLIR_func

# ===-- mlir-c/Rewrite.h - Helpers for C API to Rewrites ----------*- C -*-===//
#
#  Part of the LLVM Project, under the Apache License v2.0 with LLVM
#  Exceptions.
#  See https://llvm.org/LICENSE.txt for license information.
#  SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# ===----------------------------------------------------------------------===//
#
#  This header declares the registration and creation method for
#  rewrite patterns.
#
# ===----------------------------------------------------------------------===//

from .IR import *
from .Support import *

# ===----------------------------------------------------------------------===//
#  Opaque type declarations (see mlir-c/IR.h for more details).
# ===----------------------------------------------------------------------===//


@register_passable("trivial")
struct MlirFrozenRewritePatternSet:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirGreedyRewriteDriverConfig:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirRewritePatternSet:
    var ptr: UnsafePointer[NoneType]


fn mlirFreezeRewritePattern(
    op: MlirRewritePatternSet,
) -> MlirFrozenRewritePatternSet:
    return MLIR_func[
        "mlirFreezeRewritePattern",
        fn (MlirRewritePatternSet) -> MlirFrozenRewritePatternSet,
    ]()(op)


fn mlirFrozenRewritePatternSetDestroy(
    op: MlirFrozenRewritePatternSet,
) -> NoneType:
    return MLIR_func[
        "mlirFrozenRewritePatternSetDestroy",
        fn (MlirFrozenRewritePatternSet) -> NoneType,
    ]()(op)


fn mlirApplyPatternsAndFoldGreedily(
    op: MlirModule,
    patterns: MlirFrozenRewritePatternSet,
    a: MlirGreedyRewriteDriverConfig,
) -> MlirLogicalResult:
    return MLIR_func[
        "mlirApplyPatternsAndFoldGreedily",
        fn (
            MlirModule,
            MlirFrozenRewritePatternSet,
            MlirGreedyRewriteDriverConfig,
        ) -> MlirLogicalResult,
    ]()(op, patterns, a)


fn mlirPDLPatternModuleFromModule(op: MlirModule) -> MlirPDLPatternModule:
    return MLIR_func[
        "mlirPDLPatternModuleFromModule",
        fn (MlirModule) -> MlirPDLPatternModule,
    ]()(op)


fn mlirPDLPatternModuleDestroy(op: MlirPDLPatternModule) -> NoneType:
    return MLIR_func[
        "mlirPDLPatternModuleDestroy", fn (MlirPDLPatternModule) -> NoneType
    ]()(op)


fn mlirRewritePatternSetFromPDLPatternModule(
    op: MlirPDLPatternModule,
) -> MlirRewritePatternSet:
    return MLIR_func[
        "mlirRewritePatternSetFromPDLPatternModule",
        fn (MlirPDLPatternModule) -> MlirRewritePatternSet,
    ]()(op)


# ===----------------------------------------------------------------------=== #
#     Codegen: Remaining symbols
# ===----------------------------------------------------------------------=== #


@register_passable("trivial")
struct MlirPDLPatternModule:
    var ptr: UnsafePointer[NoneType]
