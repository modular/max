# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
#
# GENERATED FILE, DO NOT EDIT!
#
# Last generated by connorgray at 2024-07-03 18:53:28.902920 with command
# ```
#   ./utils/mojo/mlir-bindings/generate_mlir_c_bindings.sh \
#     IR.h
# ```
#
# ===----------------------------------------------------------------------=== #

from .ffi import MLIR_func
from memory import UnsafePointer

# ===-- mlir-c/IR.h - C API to Core MLIR IR classes ---------------*- C -*-===//
#
#  Part of the LLVM Project, under the Apache License v2.0 with LLVM
#  Exceptions.
#  See https://llvm.org/LICENSE.txt for license information.
#  SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# ===----------------------------------------------------------------------===//
#
#  This header declares the C interface to MLIR core IR classes.
#
#  Many exotic languages can interoperate with C code but have a harder time
#  with C++ due to name mangling. So in addition to C, this interface enables
#  tools written in such languages.
#
# ===----------------------------------------------------------------------===//

from .Support import *

# ===----------------------------------------------------------------------===//
#  Opaque type declarations.
#
#  Types are exposed to C bindings as structs containing opaque pointers. They
#  are not supposed to be inspected from C. This allows the underlying
#  representation to change without affecting the API users. The use of structs
#  instead of typedefs enables some type safety as structs are not implicitly
#  convertible to each other.
#
#  Instances of these types may or may not own the underlying object (most
#  often only point to an IR fragment without owning it). The ownership
#  semantics is defined by how an instance of the type was obtained.

# ===----------------------------------------------------------------------===//


@register_passable("trivial")
struct MlirAsmState:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirBytecodeWriterConfig:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirContext:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirDialect:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirDialectRegistry:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirOperation:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirOpOperand:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirOpPrintingFlags:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirBlock:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirRegion:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirSymbolTable:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirAttribute:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirIdentifier:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirLocation:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirModule:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirType:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirValue:
    var ptr: UnsafePointer[NoneType]


@register_passable("trivial")
struct MlirNamedAttribute:
    """Named MLIR attribute.

    A named attribute is essentially a (name, attribute) pair where the name is
    a string."""

    var name: MlirIdentifier
    var attribute: MlirAttribute


# ===----------------------------------------------------------------------===//
#  Context API.
# ===----------------------------------------------------------------------===//


fn mlirContextCreate() -> MlirContext:
    """Creates an MLIR context and transfers its ownership to the caller.
    This sets the default multithreading option (enabled)."""
    return MLIR_func["mlirContextCreate", fn () -> MlirContext]()()


fn mlirContextCreateWithThreading(threading_enabled: Bool) -> MlirContext:
    """Creates an MLIR context with an explicit setting of the multithreading
    setting and transfers its ownership to the caller."""
    return MLIR_func[
        "mlirContextCreateWithThreading", fn (Bool) -> MlirContext
    ]()(threading_enabled)


fn mlirContextCreateWithRegistry(
    registry: MlirDialectRegistry, threading_enabled: Bool
) -> MlirContext:
    """Creates an MLIR context, setting the multithreading setting explicitly and
    pre-loading the dialects from the provided DialectRegistry."""
    return MLIR_func[
        "mlirContextCreateWithRegistry",
        fn (MlirDialectRegistry, Bool) -> MlirContext,
    ]()(registry, threading_enabled)


fn mlirContextEqual(ctx1: MlirContext, ctx2: MlirContext) -> Bool:
    """Checks if two contexts are equal."""
    return MLIR_func[
        "mlirContextEqual", fn (MlirContext, MlirContext) -> Bool
    ]()(ctx1, ctx2)


# FIXEME(codegen): static function mlirContextIsNull


fn mlirContextDestroy(context: MlirContext) -> NoneType:
    """Takes an MLIR context owned by the caller and destroys it."""
    return MLIR_func["mlirContextDestroy", fn (MlirContext) -> NoneType]()(
        context
    )


fn mlirContextSetAllowUnregisteredDialects(
    context: MlirContext, allow: Bool
) -> NoneType:
    """Sets whether unregistered dialects are allowed in this context."""
    return MLIR_func[
        "mlirContextSetAllowUnregisteredDialects",
        fn (MlirContext, Bool) -> NoneType,
    ]()(context, allow)


fn mlirContextGetAllowUnregisteredDialects(context: MlirContext) -> Bool:
    """Returns whether the context allows unregistered dialects."""
    return MLIR_func[
        "mlirContextGetAllowUnregisteredDialects", fn (MlirContext) -> Bool
    ]()(context)


fn mlirContextGetNumRegisteredDialects(context: MlirContext) -> Int:
    """Returns the number of dialects registered with the given context. A
    registered dialect will be loaded if needed by the parser."""
    return MLIR_func[
        "mlirContextGetNumRegisteredDialects", fn (MlirContext) -> Int
    ]()(context)


fn mlirContextAppendDialectRegistry(
    ctx: MlirContext, registry: MlirDialectRegistry
) -> NoneType:
    """Append the contents of the given dialect registry to the registry associated
    with the context."""
    return MLIR_func[
        "mlirContextAppendDialectRegistry",
        fn (MlirContext, MlirDialectRegistry) -> NoneType,
    ]()(ctx, registry)


#  Returns the number of dialects loaded by the context.


fn mlirContextGetNumLoadedDialects(context: MlirContext) -> Int:
    """Returns the number of dialects loaded by the context."""
    return MLIR_func[
        "mlirContextGetNumLoadedDialects", fn (MlirContext) -> Int
    ]()(context)


fn mlirContextGetOrLoadDialect(
    context: MlirContext, name: MlirStringRef
) -> MlirDialect:
    """Gets the dialect instance owned by the given context using the dialect
    namespace to identify it, loads (i.e., constructs the instance of) the
    dialect if necessary. If the dialect is not registered with the context,
    returns null. Use mlirContextLoad<Name>Dialect to load an unregistered
    dialect."""
    return MLIR_func[
        "mlirContextGetOrLoadDialect",
        fn (MlirContext, MlirStringRef) -> MlirDialect,
    ]()(context, name)


fn mlirContextEnableMultithreading(
    context: MlirContext, enable: Bool
) -> NoneType:
    """Set threading mode (must be set to false to mlir-print-ir-after-all)."""
    return MLIR_func[
        "mlirContextEnableMultithreading", fn (MlirContext, Bool) -> NoneType
    ]()(context, enable)


fn mlirContextLoadAllAvailableDialects(context: MlirContext) -> NoneType:
    """Eagerly loads all available dialects registered with a context, making
    them available for use for IR construction."""
    return MLIR_func[
        "mlirContextLoadAllAvailableDialects", fn (MlirContext) -> NoneType
    ]()(context)


fn mlirContextIsRegisteredOperation(
    context: MlirContext, name: MlirStringRef
) -> Bool:
    """Returns whether the given fully-qualified operation (i.e.
    'dialect.operation') is registered with the context. This will return true
    if the dialect is loaded and the operation is registered within the
    dialect."""
    return MLIR_func[
        "mlirContextIsRegisteredOperation",
        fn (MlirContext, MlirStringRef) -> Bool,
    ]()(context, name)


fn mlirContextSetThreadPool(
    context: MlirContext, thread_pool: MlirLlvmThreadPool
) -> NoneType:
    """Sets the thread pool of the context explicitly, enabling multithreading in
    the process. This API should be used to avoid re-creating thread pools in
    long-running applications that perform multiple compilations, see
    the C++ documentation for MLIRContext for details."""
    return MLIR_func[
        "mlirContextSetThreadPool",
        fn (MlirContext, MlirLlvmThreadPool) -> NoneType,
    ]()(context, thread_pool)


# ===----------------------------------------------------------------------===//
#  Dialect API.
# ===----------------------------------------------------------------------===//


fn mlirDialectGetContext(dialect: MlirDialect) -> MlirContext:
    """Returns the context that owns the dialect."""
    return MLIR_func[
        "mlirDialectGetContext", fn (MlirDialect) -> MlirContext
    ]()(dialect)


# FIXEME(codegen): static function mlirDialectIsNull


fn mlirDialectEqual(dialect1: MlirDialect, dialect2: MlirDialect) -> Bool:
    """Checks if two dialects that belong to the same context are equal. Dialects
    from different contexts will not compare equal."""
    return MLIR_func[
        "mlirDialectEqual", fn (MlirDialect, MlirDialect) -> Bool
    ]()(dialect1, dialect2)


fn mlirDialectGetNamespace(dialect: MlirDialect) -> MlirStringRef:
    """Returns the namespace of the given dialect."""
    return MLIR_func[
        "mlirDialectGetNamespace", fn (MlirDialect) -> MlirStringRef
    ]()(dialect)


# ===----------------------------------------------------------------------===//
#  DialectHandle API.
#  Registration entry-points for each dialect are declared using the common
#  MLIR_DECLARE_DIALECT_REGISTRATION_CAPI macro, which takes the dialect
#  API name (i.e. "Func", "Tensor", "Linalg") and namespace (i.e. "func",
#  "tensor", "linalg"). The following declarations are produced:
#
#    /// Gets the above hook methods in struct form for a dialect by namespace.
#    /// This is intended to facilitate dynamic lookup and registration of
#    /// dialects via a plugin facility based on shared library symbol lookup.
#    const MlirDialectHandle *mlirGetDialectHandle__{NAMESPACE}__();
#
#  This is done via a common macro to facilitate future expansion to
#  registration schemes.
# ===----------------------------------------------------------------------===//


@register_passable("trivial")
struct MlirDialectHandle:
    var ptr: UnsafePointer[NoneType]


fn mlirDialectHandleGetNamespace(a: MlirDialectHandle) -> MlirStringRef:
    """Returns the namespace associated with the provided dialect handle."""
    return MLIR_func[
        "mlirDialectHandleGetNamespace", fn (MlirDialectHandle) -> MlirStringRef
    ]()(a)


fn mlirDialectHandleInsertDialect(
    a: MlirDialectHandle, b: MlirDialectRegistry
) -> NoneType:
    """Inserts the dialect associated with the provided dialect handle into the
    provided dialect registry."""
    return MLIR_func[
        "mlirDialectHandleInsertDialect",
        fn (MlirDialectHandle, MlirDialectRegistry) -> NoneType,
    ]()(a, b)


fn mlirDialectHandleRegisterDialect(
    a: MlirDialectHandle, b: MlirContext
) -> NoneType:
    """Registers the dialect associated with the provided dialect handle."""
    return MLIR_func[
        "mlirDialectHandleRegisterDialect",
        fn (MlirDialectHandle, MlirContext) -> NoneType,
    ]()(a, b)


fn mlirDialectHandleLoadDialect(
    a: MlirDialectHandle, b: MlirContext
) -> MlirDialect:
    """Loads the dialect associated with the provided dialect handle."""
    return MLIR_func[
        "mlirDialectHandleLoadDialect",
        fn (MlirDialectHandle, MlirContext) -> MlirDialect,
    ]()(a, b)


# ===----------------------------------------------------------------------===//
#  DialectRegistry API.
# ===----------------------------------------------------------------------===//


fn mlirDialectRegistryCreate() -> MlirDialectRegistry:
    """Creates a dialect registry and transfers its ownership to the caller."""
    return MLIR_func[
        "mlirDialectRegistryCreate", fn () -> MlirDialectRegistry
    ]()()


# FIXEME(codegen): static function mlirDialectRegistryIsNull


fn mlirDialectRegistryDestroy(registry: MlirDialectRegistry) -> NoneType:
    """Takes a dialect registry owned by the caller and destroys it."""
    return MLIR_func[
        "mlirDialectRegistryDestroy", fn (MlirDialectRegistry) -> NoneType
    ]()(registry)


# ===----------------------------------------------------------------------===//
#  Location API.
# ===----------------------------------------------------------------------===//


fn mlirLocationGetAttribute(location: MlirLocation) -> MlirAttribute:
    """Returns the underlying location attribute of this location."""
    return MLIR_func[
        "mlirLocationGetAttribute", fn (MlirLocation) -> MlirAttribute
    ]()(location)


fn mlirLocationFromAttribute(attribute: MlirAttribute) -> MlirLocation:
    """Creates a location from a location attribute."""
    return MLIR_func[
        "mlirLocationFromAttribute", fn (MlirAttribute) -> MlirLocation
    ]()(attribute)


fn mlirLocationFileLineColGet(
    context: MlirContext, filename: MlirStringRef, line: Int16, col: Int16
) -> MlirLocation:
    """Creates an File/Line/Column location owned by the given context."""
    return MLIR_func[
        "mlirLocationFileLineColGet",
        fn (MlirContext, MlirStringRef, Int16, Int16) -> MlirLocation,
    ]()(context, filename, line, col)


fn mlirLocationCallSiteGet(
    callee: MlirLocation, caller: MlirLocation
) -> MlirLocation:
    """Creates a call site location with a callee and a caller."""
    return MLIR_func[
        "mlirLocationCallSiteGet",
        fn (MlirLocation, MlirLocation) -> MlirLocation,
    ]()(callee, caller)


fn mlirLocationFusedGet(
    ctx: MlirContext,
    n_locations: Int,
    locations: UnsafePointer[MlirLocation],
    metadata: MlirAttribute,
) -> MlirLocation:
    """Creates a fused location with an array of locations and metadata."""
    return MLIR_func[
        "mlirLocationFusedGet",
        fn (
            MlirContext, Int, UnsafePointer[MlirLocation], MlirAttribute
        ) -> MlirLocation,
    ]()(ctx, n_locations, locations, metadata)


fn mlirLocationNameGet(
    context: MlirContext, name: MlirStringRef, child_loc: MlirLocation
) -> MlirLocation:
    """Creates a name location owned by the given context. Providing null location
    for childLoc is allowed and if childLoc is null location, then the behavior
    is the same as having unknown child location."""
    return MLIR_func[
        "mlirLocationNameGet",
        fn (MlirContext, MlirStringRef, MlirLocation) -> MlirLocation,
    ]()(context, name, child_loc)


fn mlirLocationUnknownGet(context: MlirContext) -> MlirLocation:
    """Creates a location with unknown position owned by the given context."""
    return MLIR_func[
        "mlirLocationUnknownGet", fn (MlirContext) -> MlirLocation
    ]()(context)


fn mlirLocationGetContext(location: MlirLocation) -> MlirContext:
    """Gets the context that a location was created with."""
    return MLIR_func[
        "mlirLocationGetContext", fn (MlirLocation) -> MlirContext
    ]()(location)


# FIXEME(codegen): static function mlirLocationIsNull


fn mlirLocationEqual(l1: MlirLocation, l2: MlirLocation) -> Bool:
    """Checks if two locations are equal."""
    return MLIR_func[
        "mlirLocationEqual", fn (MlirLocation, MlirLocation) -> Bool
    ]()(l1, l2)


fn mlirLocationPrint(
    location: MlirLocation,
    callback: MlirStringCallback,
    user_data: UnsafePointer[NoneType],
) -> NoneType:
    """Prints a location by sending chunks of the string representation and
    forwarding `userData to `callback`. Note that the callback may be called
    several times with consecutive chunks of the string."""
    return MLIR_func[
        "mlirLocationPrint",
        fn (
            MlirLocation, MlirStringCallback, UnsafePointer[NoneType]
        ) -> NoneType,
    ]()(location, callback, user_data)


# ===----------------------------------------------------------------------===//
#  Module API.
# ===----------------------------------------------------------------------===//


fn mlirModuleCreateEmpty(location: MlirLocation) -> MlirModule:
    """Creates a new, empty module and transfers ownership to the caller."""
    return MLIR_func[
        "mlirModuleCreateEmpty", fn (MlirLocation) -> MlirModule
    ]()(location)


fn mlirModuleCreateParse(
    context: MlirContext, module: MlirStringRef
) -> MlirModule:
    """Parses a module from the string and transfers ownership to the caller."""
    return MLIR_func[
        "mlirModuleCreateParse", fn (MlirContext, MlirStringRef) -> MlirModule
    ]()(context, module)


fn mlirModuleGetContext(module: MlirModule) -> MlirContext:
    """Gets the context that a module was created with."""
    return MLIR_func["mlirModuleGetContext", fn (MlirModule) -> MlirContext]()(
        module
    )


fn mlirModuleGetBody(module: MlirModule) -> MlirBlock:
    """Gets the body of the module, i.e. the only block it contains."""
    return MLIR_func["mlirModuleGetBody", fn (MlirModule) -> MlirBlock]()(
        module
    )


# FIXEME(codegen): static function mlirModuleIsNull


fn mlirModuleDestroy(module: MlirModule) -> NoneType:
    """Takes a module owned by the caller and deletes it."""
    return MLIR_func["mlirModuleDestroy", fn (MlirModule) -> NoneType]()(module)


fn mlirModuleGetOperation(module: MlirModule) -> MlirOperation:
    """Views the module as a generic operation."""
    return MLIR_func[
        "mlirModuleGetOperation", fn (MlirModule) -> MlirOperation
    ]()(module)


fn mlirModuleFromOperation(op: MlirOperation) -> MlirModule:
    """Views the generic operation as a module.
    The returned module is null when the input operation was not a ModuleOp."""
    return MLIR_func[
        "mlirModuleFromOperation", fn (MlirOperation) -> MlirModule
    ]()(op)


# ===----------------------------------------------------------------------===//
#  Operation state.
# ===----------------------------------------------------------------------===//

#  An auxiliary class for constructing operations.
#
#  This class contains all the information necessary to construct the
#  operation. It owns the MlirRegions it has pointers to and does not own
#  anything else. By default, the state can be constructed from a name and
#  location, the latter being also used to access the context, and has no other
#  components. These components can be added progressively until the operation
#  is constructed. Users are not expected to rely on the internals of this
#  class and should use mlirOperationState* functions instead.


@register_passable("trivial")
struct MlirOperationState:
    """An auxiliary class for constructing operations.

    This class contains all the information necessary to construct the
    operation. It owns the MlirRegions it has pointers to and does not own
    anything else. By default, the state can be constructed from a name and
    location, the latter being also used to access the context, and has no other
    components. These components can be added progressively until the operation
    is constructed. Users are not expected to rely on the internals of this
    class and should use mlirOperationState* functions instead."""

    var name: MlirStringRef
    var location: MlirLocation
    var nResults: Int
    var results: UnsafePointer[MlirType]
    var nOperands: Int
    var operands: UnsafePointer[MlirValue]
    var nRegions: Int
    var regions: UnsafePointer[MlirRegion]
    var nSuccessors: Int
    var successors: UnsafePointer[MlirBlock]
    var nAttributes: Int
    var attributes: UnsafePointer[MlirNamedAttribute]
    var enableResultTypeInference: Bool


fn mlirOperationStateGet(
    name: MlirStringRef, loc: MlirLocation
) -> MlirOperationState:
    """Constructs an operation state from a name and a location."""
    return MLIR_func[
        "mlirOperationStateGet",
        fn (MlirStringRef, MlirLocation) -> MlirOperationState,
    ]()(name, loc)


fn mlirOperationStateAddResults(
    state: UnsafePointer[MlirOperationState],
    n: Int,
    results: UnsafePointer[MlirType],
) -> NoneType:
    """Adds a list of components to the operation state."""
    return MLIR_func[
        "mlirOperationStateAddResults",
        fn (
            UnsafePointer[MlirOperationState], Int, UnsafePointer[MlirType]
        ) -> NoneType,
    ]()(state, n, results)


fn mlirOperationStateAddOperands(
    state: UnsafePointer[MlirOperationState],
    n: Int,
    operands: UnsafePointer[MlirValue],
) -> NoneType:
    return MLIR_func[
        "mlirOperationStateAddOperands",
        fn (
            UnsafePointer[MlirOperationState], Int, UnsafePointer[MlirValue]
        ) -> NoneType,
    ]()(state, n, operands)


fn mlirOperationStateAddOwnedRegions(
    state: UnsafePointer[MlirOperationState],
    n: Int,
    regions: UnsafePointer[MlirRegion],
) -> NoneType:
    return MLIR_func[
        "mlirOperationStateAddOwnedRegions",
        fn (
            UnsafePointer[MlirOperationState], Int, UnsafePointer[MlirRegion]
        ) -> NoneType,
    ]()(state, n, regions)


fn mlirOperationStateAddSuccessors(
    state: UnsafePointer[MlirOperationState],
    n: Int,
    successors: UnsafePointer[MlirBlock],
) -> NoneType:
    return MLIR_func[
        "mlirOperationStateAddSuccessors",
        fn (
            UnsafePointer[MlirOperationState], Int, UnsafePointer[MlirBlock]
        ) -> NoneType,
    ]()(state, n, successors)


fn mlirOperationStateAddAttributes(
    state: UnsafePointer[MlirOperationState],
    n: Int,
    attributes: UnsafePointer[MlirNamedAttribute],
) -> NoneType:
    return MLIR_func[
        "mlirOperationStateAddAttributes",
        fn (
            UnsafePointer[MlirOperationState],
            Int,
            UnsafePointer[MlirNamedAttribute],
        ) -> NoneType,
    ]()(state, n, attributes)


fn mlirOperationStateEnableResultTypeInference(
    state: UnsafePointer[MlirOperationState],
) -> NoneType:
    """Enables result type inference for the operation under construction. If
    enabled, then the caller must not have called
    mlirOperationStateAddResults(). Note that if enabled, the
    mlirOperationCreate() call is failable: it will return a null operation
    on inference failure and will emit diagnostics."""
    return MLIR_func[
        "mlirOperationStateEnableResultTypeInference",
        fn (UnsafePointer[MlirOperationState]) -> NoneType,
    ]()(state)


# ===----------------------------------------------------------------------===//
#  AsmState API.
#  While many of these are simple settings that could be represented in a
#  struct, they are wrapped in a heap allocated object and accessed via
#  functions to maximize the possibility of compatibility over time.
# ===----------------------------------------------------------------------===//


fn mlirAsmStateCreateForOperation(
    op: MlirOperation, flags: MlirOpPrintingFlags
) -> MlirAsmState:
    """Creates new AsmState, as with AsmState the IR should not be mutated
    in-between using this state.
    Must be freed with a call to mlirAsmStateDestroy()."""
    return MLIR_func[
        "mlirAsmStateCreateForOperation",
        fn (MlirOperation, MlirOpPrintingFlags) -> MlirAsmState,
    ]()(op, flags)


fn mlirAsmStateCreateForValue(
    value: MlirValue, flags: MlirOpPrintingFlags
) -> MlirAsmState:
    """Creates new AsmState from value.
    Must be freed with a call to mlirAsmStateDestroy()."""
    return MLIR_func[
        "mlirAsmStateCreateForValue",
        fn (MlirValue, MlirOpPrintingFlags) -> MlirAsmState,
    ]()(value, flags)


fn mlirAsmStateDestroy(state: MlirAsmState) -> NoneType:
    """Destroys printing flags created with mlirAsmStateCreate."""
    return MLIR_func["mlirAsmStateDestroy", fn (MlirAsmState) -> NoneType]()(
        state
    )


# ===----------------------------------------------------------------------===//
#  Op Printing flags API.
#  While many of these are simple settings that could be represented in a
#  struct, they are wrapped in a heap allocated object and accessed via
#  functions to maximize the possibility of compatibility over time.
# ===----------------------------------------------------------------------===//


fn mlirOpPrintingFlagsCreate() -> MlirOpPrintingFlags:
    """Creates new printing flags with defaults, intended for customization.
    Must be freed with a call to mlirOpPrintingFlagsDestroy()."""
    return MLIR_func[
        "mlirOpPrintingFlagsCreate", fn () -> MlirOpPrintingFlags
    ]()()


fn mlirOpPrintingFlagsDestroy(flags: MlirOpPrintingFlags) -> NoneType:
    """Destroys printing flags created with mlirOpPrintingFlagsCreate."""
    return MLIR_func[
        "mlirOpPrintingFlagsDestroy", fn (MlirOpPrintingFlags) -> NoneType
    ]()(flags)


fn mlirOpPrintingFlagsElideLargeElementsAttrs(
    flags: MlirOpPrintingFlags, large_element_limit: Int
) -> NoneType:
    """Enables the elision of large elements attributes by printing a lexically
    valid but otherwise meaningless form instead of the element data. The
    `largeElementLimit` is used to configure what is considered to be a "large"
    ElementsAttr by providing an upper limit to the number of elements."""
    return MLIR_func[
        "mlirOpPrintingFlagsElideLargeElementsAttrs",
        fn (MlirOpPrintingFlags, Int) -> NoneType,
    ]()(flags, large_element_limit)


fn mlirOpPrintingFlagsEnableDebugInfo(
    flags: MlirOpPrintingFlags, enable: Bool, pretty_form: Bool
) -> NoneType:
    """Enable or disable printing of debug information (based on `enable`). If
    'prettyForm' is set to true, debug information is printed in a more readable
    'pretty' form. Note: The IR generated with 'prettyForm' is not parsable."""
    return MLIR_func[
        "mlirOpPrintingFlagsEnableDebugInfo",
        fn (MlirOpPrintingFlags, Bool, Bool) -> NoneType,
    ]()(flags, enable, pretty_form)


fn mlirOpPrintingFlagsPrintGenericOpForm(
    flags: MlirOpPrintingFlags,
) -> NoneType:
    """Always print operations in the generic form."""
    return MLIR_func[
        "mlirOpPrintingFlagsPrintGenericOpForm",
        fn (MlirOpPrintingFlags) -> NoneType,
    ]()(flags)


fn mlirOpPrintingFlagsUseLocalScope(flags: MlirOpPrintingFlags) -> NoneType:
    """Use local scope when printing the operation. This allows for using the
    printer in a more localized and thread-safe setting, but may not
    necessarily be identical to what the IR will look like when dumping
    the full module."""
    return MLIR_func[
        "mlirOpPrintingFlagsUseLocalScope", fn (MlirOpPrintingFlags) -> NoneType
    ]()(flags)


fn mlirOpPrintingFlagsAssumeVerified(flags: MlirOpPrintingFlags) -> NoneType:
    """Do not verify the operation when using custom operation printers."""
    return MLIR_func[
        "mlirOpPrintingFlagsAssumeVerified",
        fn (MlirOpPrintingFlags) -> NoneType,
    ]()(flags)


fn mlirOpPrintingFlagsSkipRegions(flags: MlirOpPrintingFlags) -> NoneType:
    """Skip printing regions."""
    return MLIR_func[
        "mlirOpPrintingFlagsSkipRegions", fn (MlirOpPrintingFlags) -> NoneType
    ]()(flags)


# ===----------------------------------------------------------------------===//
#  Bytecode printing flags API.
# ===----------------------------------------------------------------------===//


fn mlirBytecodeWriterConfigCreate() -> MlirBytecodeWriterConfig:
    """Creates new printing flags with defaults, intended for customization.
    Must be freed with a call to mlirBytecodeWriterConfigDestroy()."""
    return MLIR_func[
        "mlirBytecodeWriterConfigCreate", fn () -> MlirBytecodeWriterConfig
    ]()()


fn mlirBytecodeWriterConfigDestroy(
    config: MlirBytecodeWriterConfig,
) -> NoneType:
    """Destroys printing flags created with mlirBytecodeWriterConfigCreate."""
    return MLIR_func[
        "mlirBytecodeWriterConfigDestroy",
        fn (MlirBytecodeWriterConfig) -> NoneType,
    ]()(config)


fn mlirBytecodeWriterConfigDesiredEmitVersion(
    flags: MlirBytecodeWriterConfig, version: Int64
) -> NoneType:
    """Sets the version to emit in the writer config."""
    return MLIR_func[
        "mlirBytecodeWriterConfigDesiredEmitVersion",
        fn (MlirBytecodeWriterConfig, Int64) -> NoneType,
    ]()(flags, version)


# ===----------------------------------------------------------------------===//
#  Operation API.
# ===----------------------------------------------------------------------===//


fn mlirOperationCreate(
    state: UnsafePointer[MlirOperationState],
) -> MlirOperation:
    """Creates an operation and transfers ownership to the caller.
    Note that caller owned child objects are transferred in this call and must
    not be further used. Particularly, this applies to any regions added to
    the state (the implementation may invalidate any such pointers).

    This call can fail under the following conditions, in which case, it will
    return a null operation and emit diagnostics:
      - Result type inference is enabled and cannot be performed."""
    return MLIR_func[
        "mlirOperationCreate",
        fn (UnsafePointer[MlirOperationState]) -> MlirOperation,
    ]()(state)


fn mlirOperationCreateParse(
    context: MlirContext, source_str: MlirStringRef, source_name: MlirStringRef
) -> MlirOperation:
    """Parses an operation, giving ownership to the caller. If parsing fails a null
    operation will be returned, and an error diagnostic emitted.

    `sourceStr` may be either the text assembly format, or binary bytecode
    format. `sourceName` is used as the file name of the source; any IR without
    locations will get a `FileLineColLoc` location with `sourceName` as the file
    name."""
    return MLIR_func[
        "mlirOperationCreateParse",
        fn (MlirContext, MlirStringRef, MlirStringRef) -> MlirOperation,
    ]()(context, source_str, source_name)


fn mlirOperationClone(op: MlirOperation) -> MlirOperation:
    """Creates a deep copy of an operation. The operation is not inserted and
    ownership is transferred to the caller."""
    return MLIR_func[
        "mlirOperationClone", fn (MlirOperation) -> MlirOperation
    ]()(op)


fn mlirOperationDestroy(op: MlirOperation) -> NoneType:
    """Takes an operation owned by the caller and destroys it."""
    return MLIR_func["mlirOperationDestroy", fn (MlirOperation) -> NoneType]()(
        op
    )


fn mlirOperationRemoveFromParent(op: MlirOperation) -> NoneType:
    """Removes the given operation from its parent block. The operation is not
    destroyed. The ownership of the operation is transferred to the caller."""
    return MLIR_func[
        "mlirOperationRemoveFromParent", fn (MlirOperation) -> NoneType
    ]()(op)


# FIXEME(codegen): static function mlirOperationIsNull


fn mlirOperationEqual(op: MlirOperation, other: MlirOperation) -> Bool:
    """Checks whether two operation handles point to the same operation. This does
    not perform deep comparison."""
    return MLIR_func[
        "mlirOperationEqual", fn (MlirOperation, MlirOperation) -> Bool
    ]()(op, other)


fn mlirOperationGetContext(op: MlirOperation) -> MlirContext:
    """Gets the context this operation is associated with."""
    return MLIR_func[
        "mlirOperationGetContext", fn (MlirOperation) -> MlirContext
    ]()(op)


fn mlirOperationGetLocation(op: MlirOperation) -> MlirLocation:
    """Gets the location of the operation."""
    return MLIR_func[
        "mlirOperationGetLocation", fn (MlirOperation) -> MlirLocation
    ]()(op)


fn mlirOperationGetTypeID(op: MlirOperation) -> MlirTypeID:
    """Gets the type id of the operation.
    Returns null if the operation does not have a registered operation
    description."""
    return MLIR_func[
        "mlirOperationGetTypeID", fn (MlirOperation) -> MlirTypeID
    ]()(op)


fn mlirOperationGetName(op: MlirOperation) -> MlirIdentifier:
    """Gets the name of the operation as an identifier."""
    return MLIR_func[
        "mlirOperationGetName", fn (MlirOperation) -> MlirIdentifier
    ]()(op)


fn mlirOperationGetBlock(op: MlirOperation) -> MlirBlock:
    """Gets the block that owns this operation, returning null if the operation is
    not owned."""
    return MLIR_func[
        "mlirOperationGetBlock", fn (MlirOperation) -> MlirBlock
    ]()(op)


fn mlirOperationGetParentOperation(op: MlirOperation) -> MlirOperation:
    """Gets the operation that owns this operation, returning null if the operation
    is not owned."""
    return MLIR_func[
        "mlirOperationGetParentOperation", fn (MlirOperation) -> MlirOperation
    ]()(op)


fn mlirOperationGetNumRegions(op: MlirOperation) -> Int:
    """Returns the number of regions attached to the given operation."""
    return MLIR_func["mlirOperationGetNumRegions", fn (MlirOperation) -> Int]()(
        op
    )


fn mlirOperationGetRegion(op: MlirOperation, pos: Int) -> MlirRegion:
    """Returns `pos`-th region attached to the operation."""
    return MLIR_func[
        "mlirOperationGetRegion", fn (MlirOperation, Int) -> MlirRegion
    ]()(op, pos)


fn mlirOperationGetNextInBlock(op: MlirOperation) -> MlirOperation:
    """Returns an operation immediately following the given operation it its
    enclosing block."""
    return MLIR_func[
        "mlirOperationGetNextInBlock", fn (MlirOperation) -> MlirOperation
    ]()(op)


fn mlirOperationGetNumOperands(op: MlirOperation) -> Int:
    """Returns the number of operands of the operation."""
    return MLIR_func[
        "mlirOperationGetNumOperands", fn (MlirOperation) -> Int
    ]()(op)


fn mlirOperationGetOperand(op: MlirOperation, pos: Int) -> MlirValue:
    """Returns `pos`-th operand of the operation."""
    return MLIR_func[
        "mlirOperationGetOperand", fn (MlirOperation, Int) -> MlirValue
    ]()(op, pos)


fn mlirOperationSetOperand(
    op: MlirOperation, pos: Int, new_value: MlirValue
) -> NoneType:
    """Sets the `pos`-th operand of the operation."""
    return MLIR_func[
        "mlirOperationSetOperand",
        fn (MlirOperation, Int, MlirValue) -> NoneType,
    ]()(op, pos, new_value)


fn mlirOperationSetOperands(
    op: MlirOperation, n_operands: Int, operands: UnsafePointer[MlirValue]
) -> NoneType:
    """Replaces the operands of the operation."""
    return MLIR_func[
        "mlirOperationSetOperands",
        fn (MlirOperation, Int, UnsafePointer[MlirValue]) -> NoneType,
    ]()(op, n_operands, operands)


fn mlirOperationGetNumResults(op: MlirOperation) -> Int:
    """Returns the number of results of the operation."""
    return MLIR_func["mlirOperationGetNumResults", fn (MlirOperation) -> Int]()(
        op
    )


fn mlirOperationGetResult(op: MlirOperation, pos: Int) -> MlirValue:
    """Returns `pos`-th result of the operation."""
    return MLIR_func[
        "mlirOperationGetResult", fn (MlirOperation, Int) -> MlirValue
    ]()(op, pos)


fn mlirOperationGetNumSuccessors(op: MlirOperation) -> Int:
    """Returns the number of successor blocks of the operation."""
    return MLIR_func[
        "mlirOperationGetNumSuccessors", fn (MlirOperation) -> Int
    ]()(op)


fn mlirOperationGetSuccessor(op: MlirOperation, pos: Int) -> MlirBlock:
    """Returns `pos`-th successor of the operation."""
    return MLIR_func[
        "mlirOperationGetSuccessor", fn (MlirOperation, Int) -> MlirBlock
    ]()(op, pos)


fn mlirOperationSetSuccessor(
    op: MlirOperation, pos: Int, block: MlirBlock
) -> NoneType:
    """Set `pos`-th successor of the operation."""
    return MLIR_func[
        "mlirOperationSetSuccessor",
        fn (MlirOperation, Int, MlirBlock) -> NoneType,
    ]()(op, pos, block)


fn mlirOperationHasInherentAttributeByName(
    op: MlirOperation, name: MlirStringRef
) -> Bool:
    """Returns true if this operation defines an inherent attribute with this name.
    Note: the attribute can be optional, so
    `mlirOperationGetInherentAttributeByName` can still return a null attribute.
    """
    return MLIR_func[
        "mlirOperationHasInherentAttributeByName",
        fn (MlirOperation, MlirStringRef) -> Bool,
    ]()(op, name)


fn mlirOperationGetInherentAttributeByName(
    op: MlirOperation, name: MlirStringRef
) -> MlirAttribute:
    """Returns an inherent attribute attached to the operation given its name.
    """
    return MLIR_func[
        "mlirOperationGetInherentAttributeByName",
        fn (MlirOperation, MlirStringRef) -> MlirAttribute,
    ]()(op, name)


fn mlirOperationSetInherentAttributeByName(
    op: MlirOperation, name: MlirStringRef, attr: MlirAttribute
) -> NoneType:
    """Sets an inherent attribute by name, replacing the existing if it exists.
    This has no effect if "name" does not match an inherent attribute."""
    return MLIR_func[
        "mlirOperationSetInherentAttributeByName",
        fn (MlirOperation, MlirStringRef, MlirAttribute) -> NoneType,
    ]()(op, name, attr)


fn mlirOperationGetNumDiscardableAttributes(op: MlirOperation) -> Int:
    """Returns the number of discardable attributes attached to the operation.
    """
    return MLIR_func[
        "mlirOperationGetNumDiscardableAttributes", fn (MlirOperation) -> Int
    ]()(op)


fn mlirOperationGetDiscardableAttribute(
    op: MlirOperation, pos: Int
) -> MlirNamedAttribute:
    """Return `pos`-th discardable attribute of the operation."""
    return MLIR_func[
        "mlirOperationGetDiscardableAttribute",
        fn (MlirOperation, Int) -> MlirNamedAttribute,
    ]()(op, pos)


fn mlirOperationGetDiscardableAttributeByName(
    op: MlirOperation, name: MlirStringRef
) -> MlirAttribute:
    """Returns a discardable attribute attached to the operation given its name.
    """
    return MLIR_func[
        "mlirOperationGetDiscardableAttributeByName",
        fn (MlirOperation, MlirStringRef) -> MlirAttribute,
    ]()(op, name)


fn mlirOperationSetDiscardableAttributeByName(
    op: MlirOperation, name: MlirStringRef, attr: MlirAttribute
) -> NoneType:
    """Sets a discardable attribute by name, replacing the existing if it exists or
    adding a new one otherwise. The new `attr` Attribute is not allowed to be
    null, use `mlirOperationRemoveDiscardableAttributeByName` to remove an
    Attribute instead."""
    return MLIR_func[
        "mlirOperationSetDiscardableAttributeByName",
        fn (MlirOperation, MlirStringRef, MlirAttribute) -> NoneType,
    ]()(op, name, attr)


fn mlirOperationRemoveDiscardableAttributeByName(
    op: MlirOperation, name: MlirStringRef
) -> Bool:
    """Removes a discardable attribute by name. Returns false if the attribute was
    not found and true if removed."""
    return MLIR_func[
        "mlirOperationRemoveDiscardableAttributeByName",
        fn (MlirOperation, MlirStringRef) -> Bool,
    ]()(op, name)


fn mlirOperationGetNumAttributes(op: MlirOperation) -> Int:
    """Returns the number of attributes attached to the operation.
    Deprecated, please use `mlirOperationGetNumInherentAttributes` or
    `mlirOperationGetNumDiscardableAttributes`."""
    return MLIR_func[
        "mlirOperationGetNumAttributes", fn (MlirOperation) -> Int
    ]()(op)


fn mlirOperationGetAttribute(op: MlirOperation, pos: Int) -> MlirNamedAttribute:
    """Return `pos`-th attribute of the operation.
    Deprecated, please use `mlirOperationGetInherentAttribute` or
    `mlirOperationGetDiscardableAttribute`."""
    return MLIR_func[
        "mlirOperationGetAttribute",
        fn (MlirOperation, Int) -> MlirNamedAttribute,
    ]()(op, pos)


fn mlirOperationGetAttributeByName(
    op: MlirOperation, name: MlirStringRef
) -> MlirAttribute:
    """Returns an attribute attached to the operation given its name.
    Deprecated, please use `mlirOperationGetInherentAttributeByName` or
    `mlirOperationGetDiscardableAttributeByName`."""
    return MLIR_func[
        "mlirOperationGetAttributeByName",
        fn (MlirOperation, MlirStringRef) -> MlirAttribute,
    ]()(op, name)


fn mlirOperationSetAttributeByName(
    op: MlirOperation, name: MlirStringRef, attr: MlirAttribute
) -> NoneType:
    """Sets an attribute by name, replacing the existing if it exists or
    adding a new one otherwise.
    Deprecated, please use `mlirOperationSetInherentAttributeByName` or
    `mlirOperationSetDiscardableAttributeByName`."""
    return MLIR_func[
        "mlirOperationSetAttributeByName",
        fn (MlirOperation, MlirStringRef, MlirAttribute) -> NoneType,
    ]()(op, name, attr)


fn mlirOperationRemoveAttributeByName(
    op: MlirOperation, name: MlirStringRef
) -> Bool:
    """Removes an attribute by name. Returns false if the attribute was not found
    and true if removed.
    Deprecated, please use `mlirOperationRemoveInherentAttributeByName` or
    `mlirOperationRemoveDiscardableAttributeByName`."""
    return MLIR_func[
        "mlirOperationRemoveAttributeByName",
        fn (MlirOperation, MlirStringRef) -> Bool,
    ]()(op, name)


fn mlirOperationPrint(
    op: MlirOperation,
    callback: MlirStringCallback,
    user_data: UnsafePointer[NoneType],
) -> NoneType:
    """Prints an operation by sending chunks of the string representation and
    forwarding `userData to `callback`. Note that the callback may be called
    several times with consecutive chunks of the string."""
    return MLIR_func[
        "mlirOperationPrint",
        fn (
            MlirOperation, MlirStringCallback, UnsafePointer[NoneType]
        ) -> NoneType,
    ]()(op, callback, user_data)


fn mlirOperationPrintWithFlags(
    op: MlirOperation,
    flags: MlirOpPrintingFlags,
    callback: MlirStringCallback,
    user_data: UnsafePointer[NoneType],
) -> NoneType:
    """Same as mlirOperationPrint but accepts flags controlling the printing
    behavior."""
    return MLIR_func[
        "mlirOperationPrintWithFlags",
        fn (
            MlirOperation,
            MlirOpPrintingFlags,
            MlirStringCallback,
            UnsafePointer[NoneType],
        ) -> NoneType,
    ]()(op, flags, callback, user_data)


fn mlirOperationPrintWithState(
    op: MlirOperation,
    state: MlirAsmState,
    callback: MlirStringCallback,
    user_data: UnsafePointer[NoneType],
) -> NoneType:
    """Same as mlirOperationPrint but accepts AsmState controlling the printing
    behavior as well as caching computed names."""
    return MLIR_func[
        "mlirOperationPrintWithState",
        fn (
            MlirOperation,
            MlirAsmState,
            MlirStringCallback,
            UnsafePointer[NoneType],
        ) -> NoneType,
    ]()(op, state, callback, user_data)


fn mlirOperationWriteBytecode(
    op: MlirOperation,
    callback: MlirStringCallback,
    user_data: UnsafePointer[NoneType],
) -> NoneType:
    """Same as mlirOperationPrint but writing the bytecode format."""
    return MLIR_func[
        "mlirOperationWriteBytecode",
        fn (
            MlirOperation, MlirStringCallback, UnsafePointer[NoneType]
        ) -> NoneType,
    ]()(op, callback, user_data)


fn mlirOperationWriteBytecodeWithConfig(
    op: MlirOperation,
    config: MlirBytecodeWriterConfig,
    callback: MlirStringCallback,
    user_data: UnsafePointer[NoneType],
) -> MlirLogicalResult:
    """Same as mlirOperationWriteBytecode but with writer config and returns
    failure only if desired bytecode could not be honored."""
    return MLIR_func[
        "mlirOperationWriteBytecodeWithConfig",
        fn (
            MlirOperation,
            MlirBytecodeWriterConfig,
            MlirStringCallback,
            UnsafePointer[NoneType],
        ) -> MlirLogicalResult,
    ]()(op, config, callback, user_data)


fn mlirOperationDump(op: MlirOperation) -> NoneType:
    """Prints an operation to stderr."""
    return MLIR_func["mlirOperationDump", fn (MlirOperation) -> NoneType]()(op)


fn mlirOperationVerify(op: MlirOperation) -> Bool:
    """Verify the operation and return true if it passes, false if it fails."""
    return MLIR_func["mlirOperationVerify", fn (MlirOperation) -> Bool]()(op)


fn mlirOperationMoveAfter(op: MlirOperation, other: MlirOperation) -> NoneType:
    """Moves the given operation immediately after the other operation in its
    parent block. The given operation may be owned by the caller or by its
    current block. The other operation must belong to a block. In any case, the
    ownership is transferred to the block of the other operation."""
    return MLIR_func[
        "mlirOperationMoveAfter", fn (MlirOperation, MlirOperation) -> NoneType
    ]()(op, other)


fn mlirOperationMoveBefore(op: MlirOperation, other: MlirOperation) -> NoneType:
    """Moves the given operation immediately before the other operation in its
    parent block. The given operation may be owner by the caller or by its
    current block. The other operation must belong to a block. In any case, the
    ownership is transferred to the block of the other operation."""
    return MLIR_func[
        "mlirOperationMoveBefore", fn (MlirOperation, MlirOperation) -> NoneType
    ]()(op, other)


@register_passable("trivial")
struct MlirWalkResult:
    """Operation walk result."""

    var value: Int8


alias MlirWalkResultAdvance = MlirWalkResult {value: 0}
alias MlirWalkResultInterrupt = MlirWalkResult {value: 1}
alias MlirWalkResultSkip = MlirWalkResult {value: 2}


@register_passable("trivial")
struct MlirWalkOrder:
    """Traversal order for operation walk."""

    var value: Int8


alias MlirWalkPreOrder = MlirWalkOrder {value: 0}
alias MlirWalkPostOrder = MlirWalkOrder {value: 1}

# Operation walker type. The handler is passed an (opaque) reference to an
# operation and a pointer to a `userData`.
alias MlirOperationWalkCallback = fn (
    MlirOperation, UnsafePointer[NoneType]
) -> MlirWalkResult


fn mlirOperationWalk(
    op: MlirOperation,
    callback: MlirOperationWalkCallback,
    user_data: UnsafePointer[NoneType],
    walk_order: MlirWalkOrder,
) -> NoneType:
    """Walks operation `op` in `walkOrder` and calls `callback` on that operation.
    `*userData` is passed to the callback as well and can be used to tunnel some
    context or other data into the callback."""
    return MLIR_func[
        "mlirOperationWalk",
        fn (
            MlirOperation,
            MlirOperationWalkCallback,
            UnsafePointer[NoneType],
            MlirWalkOrder,
        ) -> NoneType,
    ]()(op, callback, user_data, walk_order)


# ===----------------------------------------------------------------------===//
#  Region API.
# ===----------------------------------------------------------------------===//


fn mlirRegionCreate() -> MlirRegion:
    """Creates a new empty region and transfers ownership to the caller."""
    return MLIR_func["mlirRegionCreate", fn () -> MlirRegion]()()


fn mlirRegionDestroy(region: MlirRegion) -> NoneType:
    """Takes a region owned by the caller and destroys it."""
    return MLIR_func["mlirRegionDestroy", fn (MlirRegion) -> NoneType]()(region)


# FIXEME(codegen): static function mlirRegionIsNull


fn mlirRegionEqual(region: MlirRegion, other: MlirRegion) -> Bool:
    """Checks whether two region handles point to the same region. This does not
    perform deep comparison."""
    return MLIR_func["mlirRegionEqual", fn (MlirRegion, MlirRegion) -> Bool]()(
        region, other
    )


fn mlirRegionGetFirstBlock(region: MlirRegion) -> MlirBlock:
    """Gets the first block in the region."""
    return MLIR_func["mlirRegionGetFirstBlock", fn (MlirRegion) -> MlirBlock]()(
        region
    )


fn mlirRegionAppendOwnedBlock(region: MlirRegion, block: MlirBlock) -> NoneType:
    """Takes a block owned by the caller and appends it to the given region."""
    return MLIR_func[
        "mlirRegionAppendOwnedBlock", fn (MlirRegion, MlirBlock) -> NoneType
    ]()(region, block)


fn mlirRegionInsertOwnedBlock(
    region: MlirRegion, pos: Int, block: MlirBlock
) -> NoneType:
    """Takes a block owned by the caller and inserts it at `pos` to the given
    region. This is an expensive operation that linearly scans the region,
    prefer insertAfter/Before instead."""
    return MLIR_func[
        "mlirRegionInsertOwnedBlock",
        fn (MlirRegion, Int, MlirBlock) -> NoneType,
    ]()(region, pos, block)


fn mlirRegionInsertOwnedBlockAfter(
    region: MlirRegion, reference: MlirBlock, block: MlirBlock
) -> NoneType:
    """Takes a block owned by the caller and inserts it after the (non-owned)
    reference block in the given region. The reference block must belong to the
    region. If the reference block is null, prepends the block to the region."""
    return MLIR_func[
        "mlirRegionInsertOwnedBlockAfter",
        fn (MlirRegion, MlirBlock, MlirBlock) -> NoneType,
    ]()(region, reference, block)


fn mlirRegionInsertOwnedBlockBefore(
    region: MlirRegion, reference: MlirBlock, block: MlirBlock
) -> NoneType:
    """Takes a block owned by the caller and inserts it before the (non-owned)
    reference block in the given region. The reference block must belong to the
    region. If the reference block is null, appends the block to the region."""
    return MLIR_func[
        "mlirRegionInsertOwnedBlockBefore",
        fn (MlirRegion, MlirBlock, MlirBlock) -> NoneType,
    ]()(region, reference, block)


fn mlirOperationGetFirstRegion(op: MlirOperation) -> MlirRegion:
    """Returns first region attached to the operation."""
    return MLIR_func[
        "mlirOperationGetFirstRegion", fn (MlirOperation) -> MlirRegion
    ]()(op)


fn mlirRegionGetNextInOperation(region: MlirRegion) -> MlirRegion:
    """Returns the region immediately following the given region in its parent
    operation."""
    return MLIR_func[
        "mlirRegionGetNextInOperation", fn (MlirRegion) -> MlirRegion
    ]()(region)


fn mlirRegionTakeBody(target: MlirRegion, source: MlirRegion) -> NoneType:
    """Moves the entire content of the source region to the target region."""
    return MLIR_func[
        "mlirRegionTakeBody", fn (MlirRegion, MlirRegion) -> NoneType
    ]()(target, source)


# ===----------------------------------------------------------------------===//
#  Block API.
# ===----------------------------------------------------------------------===//


fn mlirBlockCreate(
    n_args: Int,
    args: UnsafePointer[MlirType],
    locs: UnsafePointer[MlirLocation],
) -> MlirBlock:
    """Creates a new empty block with the given argument types and transfers
    ownership to the caller."""
    return MLIR_func[
        "mlirBlockCreate",
        fn (
            Int, UnsafePointer[MlirType], UnsafePointer[MlirLocation]
        ) -> MlirBlock,
    ]()(n_args, args, locs)


fn mlirBlockDestroy(block: MlirBlock) -> NoneType:
    """Takes a block owned by the caller and destroys it."""
    return MLIR_func["mlirBlockDestroy", fn (MlirBlock) -> NoneType]()(block)


fn mlirBlockDetach(block: MlirBlock) -> NoneType:
    """Detach a block from the owning region and assume ownership."""
    return MLIR_func["mlirBlockDetach", fn (MlirBlock) -> NoneType]()(block)


# FIXEME(codegen): static function mlirBlockIsNull


fn mlirBlockEqual(block: MlirBlock, other: MlirBlock) -> Bool:
    """Checks whether two blocks handles point to the same block. This does not
    perform deep comparison."""
    return MLIR_func["mlirBlockEqual", fn (MlirBlock, MlirBlock) -> Bool]()(
        block, other
    )


fn mlirBlockGetParentOperation(a: MlirBlock) -> MlirOperation:
    """Returns the closest surrounding operation that contains this block."""
    return MLIR_func[
        "mlirBlockGetParentOperation", fn (MlirBlock) -> MlirOperation
    ]()(a)


fn mlirBlockGetParentRegion(block: MlirBlock) -> MlirRegion:
    """Returns the region that contains this block."""
    return MLIR_func[
        "mlirBlockGetParentRegion", fn (MlirBlock) -> MlirRegion
    ]()(block)


fn mlirBlockGetNextInRegion(block: MlirBlock) -> MlirBlock:
    """Returns the block immediately following the given block in its parent
    region."""
    return MLIR_func["mlirBlockGetNextInRegion", fn (MlirBlock) -> MlirBlock]()(
        block
    )


fn mlirBlockGetFirstOperation(block: MlirBlock) -> MlirOperation:
    """Returns the first operation in the block."""
    return MLIR_func[
        "mlirBlockGetFirstOperation", fn (MlirBlock) -> MlirOperation
    ]()(block)


fn mlirBlockGetTerminator(block: MlirBlock) -> MlirOperation:
    """Returns the terminator operation in the block or null if no terminator.
    """
    return MLIR_func[
        "mlirBlockGetTerminator", fn (MlirBlock) -> MlirOperation
    ]()(block)


fn mlirBlockAppendOwnedOperation(
    block: MlirBlock, operation: MlirOperation
) -> NoneType:
    """Takes an operation owned by the caller and appends it to the block."""
    return MLIR_func[
        "mlirBlockAppendOwnedOperation",
        fn (MlirBlock, MlirOperation) -> NoneType,
    ]()(block, operation)


fn mlirBlockInsertOwnedOperation(
    block: MlirBlock, pos: Int, operation: MlirOperation
) -> NoneType:
    """Takes an operation owned by the caller and inserts it as `pos` to the block.
    This is an expensive operation that scans the block linearly, prefer
    insertBefore/After instead."""
    return MLIR_func[
        "mlirBlockInsertOwnedOperation",
        fn (MlirBlock, Int, MlirOperation) -> NoneType,
    ]()(block, pos, operation)


fn mlirBlockInsertOwnedOperationAfter(
    block: MlirBlock, reference: MlirOperation, operation: MlirOperation
) -> NoneType:
    """Takes an operation owned by the caller and inserts it after the (non-owned)
    reference operation in the given block. If the reference is null, prepends
    the operation. Otherwise, the reference must belong to the block."""
    return MLIR_func[
        "mlirBlockInsertOwnedOperationAfter",
        fn (MlirBlock, MlirOperation, MlirOperation) -> NoneType,
    ]()(block, reference, operation)


fn mlirBlockInsertOwnedOperationBefore(
    block: MlirBlock, reference: MlirOperation, operation: MlirOperation
) -> NoneType:
    """Takes an operation owned by the caller and inserts it before the (non-owned)
    reference operation in the given block. If the reference is null, appends
    the operation. Otherwise, the reference must belong to the block."""
    return MLIR_func[
        "mlirBlockInsertOwnedOperationBefore",
        fn (MlirBlock, MlirOperation, MlirOperation) -> NoneType,
    ]()(block, reference, operation)


fn mlirBlockGetNumArguments(block: MlirBlock) -> Int:
    """Returns the number of arguments of the block."""
    return MLIR_func["mlirBlockGetNumArguments", fn (MlirBlock) -> Int]()(block)


fn mlirBlockAddArgument(
    block: MlirBlock, type: MlirType, loc: MlirLocation
) -> MlirValue:
    """Appends an argument of the specified type to the block. Returns the newly
    added argument."""
    return MLIR_func[
        "mlirBlockAddArgument",
        fn (MlirBlock, MlirType, MlirLocation) -> MlirValue,
    ]()(block, type, loc)


fn mlirBlockEraseArgument(block: MlirBlock, index: Int16) -> NoneType:
    """Erase the argument at 'index' and remove it from the argument list."""
    return MLIR_func[
        "mlirBlockEraseArgument", fn (MlirBlock, Int16) -> NoneType
    ]()(block, index)


fn mlirBlockInsertArgument(
    block: MlirBlock, pos: Int, type: MlirType, loc: MlirLocation
) -> MlirValue:
    """Inserts an argument of the specified type at a specified index to the block.
    Returns the newly added argument."""
    return MLIR_func[
        "mlirBlockInsertArgument",
        fn (MlirBlock, Int, MlirType, MlirLocation) -> MlirValue,
    ]()(block, pos, type, loc)


fn mlirBlockGetArgument(block: MlirBlock, pos: Int) -> MlirValue:
    """Returns `pos`-th argument of the block."""
    return MLIR_func[
        "mlirBlockGetArgument", fn (MlirBlock, Int) -> MlirValue
    ]()(block, pos)


fn mlirBlockPrint(
    block: MlirBlock,
    callback: MlirStringCallback,
    user_data: UnsafePointer[NoneType],
) -> NoneType:
    """Prints a block by sending chunks of the string representation and
    forwarding `userData to `callback`. Note that the callback may be called
    several times with consecutive chunks of the string."""
    return MLIR_func[
        "mlirBlockPrint",
        fn (MlirBlock, MlirStringCallback, UnsafePointer[NoneType]) -> NoneType,
    ]()(block, callback, user_data)


# ===----------------------------------------------------------------------===//
#  Value API.
# ===----------------------------------------------------------------------===//

# FIXEME(codegen): static function mlirValueIsNull


fn mlirValueEqual(value1: MlirValue, value2: MlirValue) -> Bool:
    """Returns 1 if two values are equal, 0 otherwise."""
    return MLIR_func["mlirValueEqual", fn (MlirValue, MlirValue) -> Bool]()(
        value1, value2
    )


fn mlirValueIsABlockArgument(value: MlirValue) -> Bool:
    """Returns 1 if the value is a block argument, 0 otherwise."""
    return MLIR_func["mlirValueIsABlockArgument", fn (MlirValue) -> Bool]()(
        value
    )


fn mlirValueIsAOpResult(value: MlirValue) -> Bool:
    """Returns 1 if the value is an operation result, 0 otherwise."""
    return MLIR_func["mlirValueIsAOpResult", fn (MlirValue) -> Bool]()(value)


fn mlirBlockArgumentGetOwner(value: MlirValue) -> MlirBlock:
    """Returns the block in which this value is defined as an argument. Asserts if
    the value is not a block argument."""
    return MLIR_func[
        "mlirBlockArgumentGetOwner", fn (MlirValue) -> MlirBlock
    ]()(value)


fn mlirBlockArgumentGetArgNumber(value: MlirValue) -> Int:
    """Returns the position of the value in the argument list of its block."""
    return MLIR_func["mlirBlockArgumentGetArgNumber", fn (MlirValue) -> Int]()(
        value
    )


fn mlirBlockArgumentSetType(value: MlirValue, type: MlirType) -> NoneType:
    """Sets the type of the block argument to the given type."""
    return MLIR_func[
        "mlirBlockArgumentSetType", fn (MlirValue, MlirType) -> NoneType
    ]()(value, type)


fn mlirOpResultGetOwner(value: MlirValue) -> MlirOperation:
    """Returns an operation that produced this value as its result. Asserts if the
    value is not an op result."""
    return MLIR_func["mlirOpResultGetOwner", fn (MlirValue) -> MlirOperation]()(
        value
    )


fn mlirOpResultGetResultNumber(value: MlirValue) -> Int:
    """Returns the position of the value in the list of results of the operation
    that produced it."""
    return MLIR_func["mlirOpResultGetResultNumber", fn (MlirValue) -> Int]()(
        value
    )


fn mlirValueGetType(value: MlirValue) -> MlirType:
    """Returns the type of the value."""
    return MLIR_func["mlirValueGetType", fn (MlirValue) -> MlirType]()(value)


fn mlirValueSetType(value: MlirValue, type: MlirType) -> NoneType:
    """Set the type of the value."""
    return MLIR_func[
        "mlirValueSetType", fn (MlirValue, MlirType) -> NoneType
    ]()(value, type)


fn mlirValueDump(value: MlirValue) -> NoneType:
    """Prints the value to the standard error stream."""
    return MLIR_func["mlirValueDump", fn (MlirValue) -> NoneType]()(value)


fn mlirValuePrint(
    value: MlirValue,
    callback: MlirStringCallback,
    user_data: UnsafePointer[NoneType],
) -> NoneType:
    """Prints a value by sending chunks of the string representation and
    forwarding `userData to `callback`. Note that the callback may be called
    several times with consecutive chunks of the string."""
    return MLIR_func[
        "mlirValuePrint",
        fn (MlirValue, MlirStringCallback, UnsafePointer[NoneType]) -> NoneType,
    ]()(value, callback, user_data)


fn mlirValuePrintAsOperand(
    value: MlirValue,
    state: MlirAsmState,
    callback: MlirStringCallback,
    user_data: UnsafePointer[NoneType],
) -> NoneType:
    """Prints a value as an operand (i.e., the ValueID)."""
    return MLIR_func[
        "mlirValuePrintAsOperand",
        fn (
            MlirValue, MlirAsmState, MlirStringCallback, UnsafePointer[NoneType]
        ) -> NoneType,
    ]()(value, state, callback, user_data)


fn mlirValueGetFirstUse(value: MlirValue) -> MlirOpOperand:
    """Returns an op operand representing the first use of the value, or a null op
    operand if there are no uses."""
    return MLIR_func["mlirValueGetFirstUse", fn (MlirValue) -> MlirOpOperand]()(
        value
    )


fn mlirValueReplaceAllUsesOfWith(of: MlirValue, `with`: MlirValue) -> NoneType:
    """Replace all uses of 'of' value with the 'with' value, updating anything in
    the IR that uses 'of' to use the other value instead.  When this returns
    there are zero uses of 'of'."""
    return MLIR_func[
        "mlirValueReplaceAllUsesOfWith", fn (MlirValue, MlirValue) -> NoneType
    ]()(of, `with`)


# ===----------------------------------------------------------------------===//
#  OpOperand API.
# ===----------------------------------------------------------------------===//


fn mlirOpOperandIsNull(op_operand: MlirOpOperand) -> Bool:
    """Returns whether the op operand is null."""
    return MLIR_func["mlirOpOperandIsNull", fn (MlirOpOperand) -> Bool]()(
        op_operand
    )


fn mlirOpOperandGetValue(op_operand: MlirOpOperand) -> MlirValue:
    """Returns the value of an op operand."""
    return MLIR_func[
        "mlirOpOperandGetValue", fn (MlirOpOperand) -> MlirValue
    ]()(op_operand)


fn mlirOpOperandGetOwner(op_operand: MlirOpOperand) -> MlirOperation:
    """Returns the owner operation of an op operand."""
    return MLIR_func[
        "mlirOpOperandGetOwner", fn (MlirOpOperand) -> MlirOperation
    ]()(op_operand)


fn mlirOpOperandGetOperandNumber(op_operand: MlirOpOperand) -> Int16:
    """Returns the operand number of an op operand."""
    return MLIR_func[
        "mlirOpOperandGetOperandNumber", fn (MlirOpOperand) -> Int16
    ]()(op_operand)


fn mlirOpOperandGetNextUse(op_operand: MlirOpOperand) -> MlirOpOperand:
    """Returns an op operand representing the next use of the value, or a null op
    operand if there is no next use."""
    return MLIR_func[
        "mlirOpOperandGetNextUse", fn (MlirOpOperand) -> MlirOpOperand
    ]()(op_operand)


# ===----------------------------------------------------------------------===//
#  Type API.
# ===----------------------------------------------------------------------===//


fn mlirTypeParseGet(context: MlirContext, type: MlirStringRef) -> MlirType:
    """Parses a type. The type is owned by the context."""
    return MLIR_func[
        "mlirTypeParseGet", fn (MlirContext, MlirStringRef) -> MlirType
    ]()(context, type)


fn mlirTypeGetContext(type: MlirType) -> MlirContext:
    """Gets the context that a type was created with."""
    return MLIR_func["mlirTypeGetContext", fn (MlirType) -> MlirContext]()(type)


fn mlirTypeGetTypeID(type: MlirType) -> MlirTypeID:
    """Gets the type ID of the type."""
    return MLIR_func["mlirTypeGetTypeID", fn (MlirType) -> MlirTypeID]()(type)


fn mlirTypeGetDialect(type: MlirType) -> MlirDialect:
    """Gets the dialect a type belongs to."""
    return MLIR_func["mlirTypeGetDialect", fn (MlirType) -> MlirDialect]()(type)


# FIXEME(codegen): static function mlirTypeIsNull


fn mlirTypeEqual(t1: MlirType, t2: MlirType) -> Bool:
    """Checks if two types are equal."""
    return MLIR_func["mlirTypeEqual", fn (MlirType, MlirType) -> Bool]()(t1, t2)


fn mlirTypePrint(
    type: MlirType,
    callback: MlirStringCallback,
    user_data: UnsafePointer[NoneType],
) -> NoneType:
    """Prints a location by sending chunks of the string representation and
    forwarding `userData to `callback`. Note that the callback may be called
    several times with consecutive chunks of the string."""
    return MLIR_func[
        "mlirTypePrint",
        fn (MlirType, MlirStringCallback, UnsafePointer[NoneType]) -> NoneType,
    ]()(type, callback, user_data)


fn mlirTypeDump(type: MlirType) -> NoneType:
    """Prints the type to the standard error stream."""
    return MLIR_func["mlirTypeDump", fn (MlirType) -> NoneType]()(type)


# ===----------------------------------------------------------------------===//
#  Attribute API.
# ===----------------------------------------------------------------------===//


fn mlirAttributeParseGet(
    context: MlirContext, attr: MlirStringRef
) -> MlirAttribute:
    """Parses an attribute. The attribute is owned by the context."""
    return MLIR_func[
        "mlirAttributeParseGet",
        fn (MlirContext, MlirStringRef) -> MlirAttribute,
    ]()(context, attr)


fn mlirAttributeGetContext(attribute: MlirAttribute) -> MlirContext:
    """Gets the context that an attribute was created with."""
    return MLIR_func[
        "mlirAttributeGetContext", fn (MlirAttribute) -> MlirContext
    ]()(attribute)


fn mlirAttributeGetType(attribute: MlirAttribute) -> MlirType:
    """Gets the type of this attribute."""
    return MLIR_func["mlirAttributeGetType", fn (MlirAttribute) -> MlirType]()(
        attribute
    )


fn mlirAttributeGetTypeID(attribute: MlirAttribute) -> MlirTypeID:
    """Gets the type id of the attribute."""
    return MLIR_func[
        "mlirAttributeGetTypeID", fn (MlirAttribute) -> MlirTypeID
    ]()(attribute)


fn mlirAttributeGetDialect(attribute: MlirAttribute) -> MlirDialect:
    """Gets the dialect of the attribute."""
    return MLIR_func[
        "mlirAttributeGetDialect", fn (MlirAttribute) -> MlirDialect
    ]()(attribute)


# FIXEME(codegen): static function mlirAttributeIsNull


fn mlirAttributeEqual(a1: MlirAttribute, a2: MlirAttribute) -> Bool:
    """Checks if two attributes are equal."""
    return MLIR_func[
        "mlirAttributeEqual", fn (MlirAttribute, MlirAttribute) -> Bool
    ]()(a1, a2)


fn mlirAttributePrint(
    attr: MlirAttribute,
    callback: MlirStringCallback,
    user_data: UnsafePointer[NoneType],
) -> NoneType:
    """Prints an attribute by sending chunks of the string representation and
    forwarding `userData to `callback`. Note that the callback may be called
    several times with consecutive chunks of the string."""
    return MLIR_func[
        "mlirAttributePrint",
        fn (
            MlirAttribute, MlirStringCallback, UnsafePointer[NoneType]
        ) -> NoneType,
    ]()(attr, callback, user_data)


fn mlirAttributeDump(attr: MlirAttribute) -> NoneType:
    """Prints the attribute to the standard error stream."""
    return MLIR_func["mlirAttributeDump", fn (MlirAttribute) -> NoneType]()(
        attr
    )


fn mlirNamedAttributeGet(
    name: MlirIdentifier, attr: MlirAttribute
) -> MlirNamedAttribute:
    """Associates an attribute with the name. Takes ownership of neither."""
    return MLIR_func[
        "mlirNamedAttributeGet",
        fn (MlirIdentifier, MlirAttribute) -> MlirNamedAttribute,
    ]()(name, attr)


# ===----------------------------------------------------------------------===//
#  Identifier API.
# ===----------------------------------------------------------------------===//


fn mlirIdentifierGet(
    context: MlirContext, str: MlirStringRef
) -> MlirIdentifier:
    """Gets an identifier with the given string value."""
    return MLIR_func[
        "mlirIdentifierGet", fn (MlirContext, MlirStringRef) -> MlirIdentifier
    ]()(context, str)


fn mlirIdentifierGetContext(a: MlirIdentifier) -> MlirContext:
    """Returns the context associated with this identifier."""
    return MLIR_func[
        "mlirIdentifierGetContext", fn (MlirIdentifier) -> MlirContext
    ]()(a)


fn mlirIdentifierEqual(ident: MlirIdentifier, other: MlirIdentifier) -> Bool:
    """Checks whether two identifiers are the same."""
    return MLIR_func[
        "mlirIdentifierEqual", fn (MlirIdentifier, MlirIdentifier) -> Bool
    ]()(ident, other)


fn mlirIdentifierStr(ident: MlirIdentifier) -> MlirStringRef:
    """Gets the string value of the identifier."""
    return MLIR_func[
        "mlirIdentifierStr", fn (MlirIdentifier) -> MlirStringRef
    ]()(ident)


# ===----------------------------------------------------------------------===//
#  Symbol and SymbolTable API.
# ===----------------------------------------------------------------------===//


fn mlirSymbolTableGetSymbolAttributeName() -> MlirStringRef:
    """Returns the name of the attribute used to store symbol names compatible with
    symbol tables."""
    return MLIR_func[
        "mlirSymbolTableGetSymbolAttributeName", fn () -> MlirStringRef
    ]()()


fn mlirSymbolTableGetVisibilityAttributeName() -> MlirStringRef:
    """Returns the name of the attribute used to store symbol visibility."""
    return MLIR_func[
        "mlirSymbolTableGetVisibilityAttributeName", fn () -> MlirStringRef
    ]()()


fn mlirSymbolTableCreate(operation: MlirOperation) -> MlirSymbolTable:
    """Creates a symbol table for the given operation. If the operation does not
    have the SymbolTable trait, returns a null symbol table."""
    return MLIR_func[
        "mlirSymbolTableCreate", fn (MlirOperation) -> MlirSymbolTable
    ]()(operation)


# FIXEME(codegen): static function mlirSymbolTableIsNull


fn mlirSymbolTableDestroy(symbol_table: MlirSymbolTable) -> NoneType:
    """Destroys the symbol table created with mlirSymbolTableCreate. This does not
    affect the operations in the table."""
    return MLIR_func[
        "mlirSymbolTableDestroy", fn (MlirSymbolTable) -> NoneType
    ]()(symbol_table)


fn mlirSymbolTableLookup(
    symbol_table: MlirSymbolTable, name: MlirStringRef
) -> MlirOperation:
    """Looks up a symbol with the given name in the given symbol table and returns
    the operation that corresponds to the symbol. If the symbol cannot be found,
    returns a null operation."""
    return MLIR_func[
        "mlirSymbolTableLookup",
        fn (MlirSymbolTable, MlirStringRef) -> MlirOperation,
    ]()(symbol_table, name)


fn mlirSymbolTableInsert(
    symbol_table: MlirSymbolTable, operation: MlirOperation
) -> MlirAttribute:
    """Inserts the given operation into the given symbol table. The operation must
    have the symbol trait. If the symbol table already has a symbol with the
    same name, renames the symbol being inserted to ensure name uniqueness. Note
    that this does not move the operation itself into the block of the symbol
    table operation, this should be done separately. Returns the name of the
    symbol after insertion."""
    return MLIR_func[
        "mlirSymbolTableInsert",
        fn (MlirSymbolTable, MlirOperation) -> MlirAttribute,
    ]()(symbol_table, operation)


fn mlirSymbolTableErase(
    symbol_table: MlirSymbolTable, operation: MlirOperation
) -> NoneType:
    """Removes the given operation from the symbol table and erases it."""
    return MLIR_func[
        "mlirSymbolTableErase", fn (MlirSymbolTable, MlirOperation) -> NoneType
    ]()(symbol_table, operation)


fn mlirSymbolTableReplaceAllSymbolUses(
    old_symbol: MlirStringRef, new_symbol: MlirStringRef, `from`: MlirOperation
) -> MlirLogicalResult:
    """Attempt to replace all uses that are nested within the given operation
    of the given symbol 'oldSymbol' with the provided 'newSymbol'. This does
    not traverse into nested symbol tables. Will fail atomically if there are
    any unknown operations that may be potential symbol tables."""
    return MLIR_func[
        "mlirSymbolTableReplaceAllSymbolUses",
        fn (MlirStringRef, MlirStringRef, MlirOperation) -> MlirLogicalResult,
    ]()(old_symbol, new_symbol, `from`)


fn mlirSymbolTableWalkSymbolTables(
    `from`: MlirOperation,
    all_sym_uses_visible: Bool,
    callback: fn (MlirOperation, Bool, UnsafePointer[NoneType]) -> NoneType,
    user_data: UnsafePointer[NoneType],
) -> NoneType:
    """Walks all symbol table operations nested within, and including, `op`. For
    each symbol table operation, the provided callback is invoked with the op
    and a boolean signifying if the symbols within that symbol table can be
    treated as if all uses within the IR are visible to the caller.
    `allSymUsesVisible` identifies whether all of the symbol uses of symbols
    within `op` are visible."""
    return MLIR_func[
        "mlirSymbolTableWalkSymbolTables",
        fn (
            MlirOperation,
            Bool,
            fn (MlirOperation, Bool, UnsafePointer[NoneType]) -> NoneType,
            UnsafePointer[NoneType],
        ) -> NoneType,
    ]()(`from`, all_sym_uses_visible, callback, user_data)
