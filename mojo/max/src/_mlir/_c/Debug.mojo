# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
#
# GENERATED FILE, DO NOT EDIT!
#
# Last generated by connorgray at 2024-07-03 18:53:28.478439 with command
# ```
#   ./utils/mojo/mlir-bindings/generate_mlir_c_bindings.sh \
#     Debug.h
# ```
#
# ===----------------------------------------------------------------------=== #

from .ffi import MLIR_func

# ===-- mlir-c/Debug.h - C API for MLIR/LLVM debugging functions --*- C -*-===//
#
#  Part of the LLVM Project, under the Apache License v2.0 with LLVM
#  Exceptions.
#  See https://llvm.org/LICENSE.txt for license information.
#  SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# ===----------------------------------------------------------------------===//

from .Support import *


fn mlirEnableGlobalDebug(enable: Bool) -> NoneType:
    """Sets the global debugging flag."""
    return MLIR_func["mlirEnableGlobalDebug", fn (Bool) -> NoneType]()(enable)


fn mlirIsGlobalDebugEnabled() -> Bool:
    """Retuns `true` if the global debugging flag is set, false otherwise."""
    return MLIR_func["mlirIsGlobalDebugEnabled", fn () -> Bool]()()


fn mlirSetGlobalDebugType(type: UnsafePointer[Int8]) -> NoneType:
    """Sets the current debug type, similarly to `-debug-only=type` in the
    command-line tools. Note that global debug should be enabled for any output
    to be produced."""
    return MLIR_func[
        "mlirSetGlobalDebugType", fn (UnsafePointer[Int8]) -> NoneType
    ]()(type)


fn mlirSetGlobalDebugTypes(
    types: UnsafePointer[UnsafePointer[Int8]], n: Int
) -> NoneType:
    """Sets multiple current debug types, similarly to `-debug-only=type1,type2" in
    the command-line tools. Note that global debug should be enabled for any
    output to be produced."""
    return MLIR_func[
        "mlirSetGlobalDebugTypes",
        fn (UnsafePointer[UnsafePointer[Int8]], Int) -> NoneType,
    ]()(types, n)


fn mlirIsCurrentDebugType(type: UnsafePointer[Int8]) -> Bool:
    """Checks if `type` is set as the current debug type."""
    return MLIR_func[
        "mlirIsCurrentDebugType", fn (UnsafePointer[Int8]) -> Bool
    ]()(type)
