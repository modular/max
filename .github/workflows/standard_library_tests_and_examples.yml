# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #

name: Standard Library tests and examples

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  test-examples:
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-14"]

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive
      LLVM_VERSION: 17

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Download Modular installer
        run: |
          curl -s https://get.modular.com | sh -

      - name: Install nightly Mojo compiler
        run: |
          # The <auth_token> of "examples" is arbitrary but something
          # needs to be provided.
          modular auth examples
          modular install nightly/mojo

          # Put Mojo on the PATH
          echo "MODULAR_HOME=$HOME/.modular" >> $GITHUB_ENV

          echo "$HOME/.modular/pkg/packages.modular.com_nightly_mojo/bin" >> $GITHUB_PATH

      - name: Install build tools (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{env.LLVM_VERSION}}

          # Make common LLVM binaries (including FileCheck) in our PATH so they work when used in an unversioned context
          # For example, instead of saying `FileCheck-17` which exists in `/usr/bin`, this allows us to just call
          # FileCheck unqualified.
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{env.LLVM_VERSION}} 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${{env.LLVM_VERSION}} 100
          sudo update-alternatives --install /usr/bin/lld lld /usr/bin/lld-${{env.LLVM_VERSION}} 100
          sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/ld.lld-${{env.LLVM_VERSION}} 100
          sudo update-alternatives --install /usr/bin/lldb lldb /usr/bin/lldb-${{env.LLVM_VERSION}} 100
          sudo update-alternatives --install /usr/bin/FileCheck FileCheck /usr/bin/FileCheck-${{env.LLVM_VERSION}} 100


          python3 -m pip install lit

      - name: Filter files changed
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        id: filter
        with:
          # Enable listing of files matching each filter.
          # Paths to files will be available in `${FILTER_NAME}_files` output variable.
          # Paths will be escaped and space-delimited.
          # Output is usable as command-line argument list in Linux shell.
          list-files: shell

          filters: |
            mojo:
              - added|modified: '**/*.mojo'
              - added|modified: '**/*.ðŸ”¥'

      # While this may seem like debugging, it's useful to see what's going on
      # at a glance in this workflow.
      - name: Print file changes
        run: |
          echo "Mojo files changed below:"
          echo ${{ steps.filter.outputs.mojo_files }}

      - name: mojo-formatting
        if: ${{ steps.filter.outputs.mojo == 'true' }}
        run: |
          # Make sure `mojo` is in the PATH.
          # TODO: Refactor after https://github.com/modularml/mojo/pull/2032 lands
          export PATH="/home/runner/.modular/pkg/packages.modular.com_nightly_mojo/bin:$PATH"
          # The list of files from the filter step is relative to the checkout
          # root.
          cd $GITHUB_WORKSPACE
          mojo format ${{ steps.filter.outputs.mojo_files }} -l 80
          # Check if any lines were formatted.  If any were, fail this step.
          if [ $(git diff | wc -l) -gt 0 ]; then
            echo -e "\nError! Mojo code not formatted. Run `mojo format -l 80` ...\n"
            echo -e "\nFiles that don't match the proper formatting:\n"
            git diff --name-only
            echo -e "\nFull diff:\n"
            git diff
            exit 1
          fi

      - name: Install build tools (macOS)
        if: ${{ matrix.os == 'macos-14' }}
        run: |
          # Install `lit` for use in the tests
          brew install lit

          # Ensure `FileCheck` from the pre-installed LLVM 15 package is visible
          echo $(brew --prefix llvm@15)/bin/ >> $GITHUB_PATH

      - name: Run standard library tests and examples
        run: |
          ./stdlib/scripts/run-tests.sh
          ./examples/run-examples.sh
